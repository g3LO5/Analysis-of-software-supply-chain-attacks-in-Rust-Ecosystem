#define _WIN32_DCOM
#include <iostream>
#include <comdef.h>
#include <Wbemidl.h>
#include <vector>
#include <string>

#pragma comment(lib, "wbemuuid.lib")

struct ThreadInfo {
    DWORD threadId;
    std::wstring state;
};

std::vector<ThreadInfo> GetThreadsInfoWMI(DWORD pid) {
    std::vector<ThreadInfo> threads;

    HRESULT hres;

    // Initialize COM
    hres = CoInitializeEx(0, COINIT_MULTITHREADED);
    if (FAILED(hres)) return threads;

    // Initialize WMI
    IWbemLocator *pLoc = NULL;
    hres = CoCreateInstance(CLSID_WbemLocator, 0, CLSCTX_INPROC_SERVER, IID_IWbemLocator, (LPVOID *) &pLoc);
    if (FAILED(hres)) {
        CoUninitialize();
        return threads;
    }

    IWbemServices *pSvc = NULL;
    hres = pLoc->ConnectServer(
        _bstr_t(L"ROOT\\CIMV2"),
        NULL, NULL, NULL, 0, NULL, NULL, &pSvc
    );
    if (FAILED(hres)) {
        pLoc->Release();
        CoUninitialize();
        return threads;
    }

    // Set security levels on the proxy
    hres = CoSetProxyBlanket(
        pSvc, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE, NULL,
        RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE, NULL, EOAC_NONE
    );
    if (FAILED(hres)) {
        pSvc->Release();
        pLoc->Release();
        CoUninitialize();
        return threads;
    }

    // Make the WMI query
    IEnumWbemClassObject* pEnumerator = NULL;
    std::wstring query = L"SELECT * FROM Win32_Thread WHERE ProcessHandle = " + std::to_wstring(pid);
    hres = pSvc->ExecQuery(
        bstr_t("WQL"),
        bstr_t(query.c_str()),
        WBEM_FLAG_FORWARD_ONLY | WBEM_FLAG_RETURN_IMMEDIATELY,
        NULL,
        &pEnumerator
    );
    if (FAILED(hres)) {
        pSvc->Release();
        pLoc->Release();
        CoUninitialize();
        return threads;
    }

    // Get the data from the query
    IWbemClassObject *pclsObj = NULL;
    ULONG uReturn = 0;
    while (pEnumerator) {
        HRESULT hr = pEnumerator->Next(WBEM_INFINITE, 1, &pclsObj, &uReturn);
        if(0 == uReturn) break;

        VARIANT vtProp;
        ThreadInfo threadInfo;

        // Get thread ID
        hr = pclsObj->Get(L"Handle", 0, &vtProp, 0, 0);
        if (SUCCEEDED(hr)) {
            threadInfo.threadId = _wtoi(vtProp.bstrVal);
            VariantClear(&vtProp);
        }

        // Get thread state
        hr = pclsObj->Get(L"ThreadState", 0, &vtProp, 0, 0);
        if (SUCCEEDED(hr)) {
            threadInfo.state = vtProp.bstrVal;
            VariantClear(&vtProp);
        }

        threads.push_back(threadInfo);

        pclsObj->Release();
    }

    // Cleanup
    pSvc->Release();
    pLoc->Release();
    pEnumerator->Release();
    CoUninitialize();

    return threads;
}