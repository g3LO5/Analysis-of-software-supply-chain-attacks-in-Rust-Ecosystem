#define _WIN32_DCOM
#include <iostream>
#include <comdef.h>
#include <Wbemidl.h>
#include <vector>
#include <string>

#pragma comment(lib, "wbemuuid.lib")

struct ThreadInfo {
    DWORD threadId;
    std::wstring state;
    DWORD waitTime;
    DWORD priority;
};

std::vector<ThreadInfo> GetThreadsInfo(DWORD pid) {
    std::vector<ThreadInfo> threads;
    HRESULT hres;

    // Khởi tạo COM
    hres = CoInitializeEx(0, COINIT_MULTITHREADED);
    if (FAILED(hres)) return threads;

    // Khởi tạo WMI
    IWbemLocator *pLoc = NULL;
    hres = CoCreateInstance(CLSID_WbemLocator, 0, CLSCTX_INPROC_SERVER, IID_IWbemLocator, (LPVOID *) &pLoc);
    if (FAILED(hres)) {
        CoUninitialize();
        return threads;
    }

    IWbemServices *pSvc = NULL;
    hres = pLoc->ConnectServer(_bstr_t(L"ROOT\\CIMV2"), NULL, NULL, 0, NULL, 0, 0, &pSvc);
    if (FAILED(hres)) {
        pLoc->Release();
        CoUninitialize();
        return threads;
    }

    // Đặt mức bảo mật trên proxy
    hres = CoSetProxyBlanket(pSvc, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE, NULL,
        RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE, NULL, EOAC_NONE);
    if (FAILED(hres)) {
        pSvc->Release();
        pLoc->Release();
        CoUninitialize();
        return threads;
    }

    // Tạo truy vấn WMI
    IEnumWbemClassObject* pEnumerator = NULL;
    std::wstring query = L"SELECT * FROM Win32_Thread WHERE ProcessHandle = " + std::to_wstring(pid);
    hres = pSvc->ExecQuery(bstr_t("WQL"), bstr_t(query.c_str()),
        WBEM_FLAG_FORWARD_ONLY | WBEM_FLAG_RETURN_IMMEDIATELY, NULL, &pEnumerator);
    if (FAILED(hres)) {
        pSvc->Release();
        pLoc->Release();
        CoUninitialize();
        return threads;
    }

    // Lấy dữ liệu từ truy vấn
    IWbemClassObject *pclsObj = NULL;
    ULONG uReturn = 0;
    while (pEnumerator) {
        HRESULT hr = pEnumerator->Next(WBEM_INFINITE, 1, &pclsObj, &uReturn);
        if(0 == uReturn) break;

        VARIANT vtProp;
        ThreadInfo threadInfo;

        // Lấy Thread ID
        hr = pclsObj->Get(L"Handle", 0, &vtProp, 0, 0);
        if (SUCCEEDED(hr)) {
            threadInfo.threadId = _wtoi(vtProp.bstrVal);
            VariantClear(&vtProp);
        }

        // Lấy trạng thái Thread
        hr = pclsObj->Get(L"ThreadState", 0, &vtProp, 0, 0);
        if (SUCCEEDED(hr)) {
            threadInfo.state = vtProp.bstrVal;
            VariantClear(&vtProp);
        }

        // Lấy thời gian chờ
        hr = pclsObj->Get(L"ThreadWaitReason", 0, &vtProp, 0, 0);
        if (SUCCEEDED(hr)) {
            threadInfo.waitTime = vtProp.uintVal;
            VariantClear(&vtProp);
        }

        // Lấy độ ưu tiên
        hr = pclsObj->Get(L"Priority", 0, &vtProp, 0, 0);
        if (SUCCEEDED(hr)) {
            threadInfo.priority = vtProp.uintVal;
            VariantClear(&vtProp);
        }

        threads.push_back(threadInfo);
        pclsObj->Release();
    }

    // Dọn dẹp
    pSvc->Release();
    pLoc->Release();
    pEnumerator->Release();
    CoUninitialize();

    return threads;
}

int main() {
    DWORD pid;
    std::wcout << L"Enter process ID: ";
    std::wcin >> pid;

    auto threads = GetThreadsInfo(pid);

    std::wcout << L"Threads for process " << pid << L":\n";
    for (const auto& thread : threads) {
        std::wcout << L"Thread ID: " << thread.threadId
                   << L", State: " << thread.state
                   << L", Wait Reason: " << thread.waitTime
                   << L", Priority: " << thread.priority << L"\n";
    }

    return 0;
}