--[ Match #1 of 22 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\.cargo_vcs_info.json
   Pattern: ["'][a-z0-9]{40,}["']
  | {
  |   "git": {
  |     "sha1": "69c944bc8a05a8220fbfd5e6d0097c15a0b92163"
  |   },
  |   "path_in_vcs": ""
  | }

--[ Match #2 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \.(request|post|get)\(
  |                   .active_peers
  |                   .get(peer_id)
  |                   .map(|(_, addrs)| addrs)
  |                   .or_else(|| self.passive_peers.get(peer_id))
  |                   .expect("")
  |                   .clone(),
  |               })
  | 

--[ Match #3 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \.(request|post|get)\(
  |                 peer_id: *peer_id,
  |                 addresses: self
  |                   .active_peers
  |                   .get(peer_id)
  |                   .map(|(_, addrs)| addrs)
  |                   .or_else(|| self.passive_peers.get(peer_id))
  |                   .expect("")
  | 

--[ Match #4 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \.(request|post|get)\(
  |               Some(
  |                 msg
  |                   .peers
  |                   .get(&AddressablePeer {
  |                     peer_id: *id,
  |                     addresses: Default::default(),
  |                   })
  | 

--[ Match #5 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \.(request|post|get)\(
  |           *id,
  |           self
  |             .passive_peers
  |             .get(id)
  |             .map(Clone::clone)
  |             .or_else(|| {
  |               Some(
  | 

--[ Match #6 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \.(request|post|get)\(
  | 
  |     // if the initiator is one of our active peers,
  |     // then just respond to it on the open link.
  |     if let Some((connection, _)) = self.active_peers.get(&msg.origin.peer_id) {
  |       self.send_message(
  |         msg.origin.peer_id,
  |         *connection,
  | 

--[ Match #7 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \.(request|post|get)\(
  |             Some(
  |               msg
  |                 .peers
  |                 .get(&AddressablePeer {
  |                   peer_id: $peer_id,
  |                   addresses: HashSet::new(),
  |                 })
  | 

--[ Match #8 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \.(request|post|get)\(
  |           .passive_peers
  |           .get(&$peer_id)
  |           .map(Clone::clone)
  |           .or_else(|| self.active_peers.get(&$peer_id).map(|(_, v)| v.clone()))
  |           .or_else(|| {
  |             Some(
  |               msg
  | 

--[ Match #9 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \.(request|post|get)\(
  |       ($peer_id:expr) => {
  |         self
  |           .passive_peers
  |           .get(&$peer_id)
  |           .map(Clone::clone)
  |           .or_else(|| self.active_peers.get(&$peer_id).map(|(_, v)| v.clone()))
  |           .or_else(|| {
  | 

--[ Match #10 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \.(request|post|get)\(
  |             peer_id: random_id,
  |             addresses: self
  |               .active_peers
  |               .get(&random_id)
  |               .map(|(_, addrs)| addrs)
  |               .expect("chosen by random from existing values")
  |               .clone(),
  | 

--[ Match #11 of 22 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\topic.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |     this_node: AddressablePeer,
  |     cmdtx: UnboundedSender<Command>,
  |   ) -> Self {
  |     let timeout = network_config.pending_timeout;
  |     let mut pending_dials = ExpiringSet::<IpAddress>::new(timeout);
  | 
  |     // dial all bootstrap nodes
  | 

--[ Match #12 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\network.rs
   Pattern: \.(request|post|get)\(
  |     );
  | 
  |     increment_counter!("topics_joined");
  |     Ok(self.topics.get(&name).unwrap().clone())
  |   }
  | 
  |   /// Runs the network event loop.
  | 

--[ Match #13 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\muxer.rs
   Pattern: \.(request|post|get)\(
  |     self
  |       .assigned
  |       .get(peer)
  |       .and_then(|conns| conns.get(connection))
  |   }
  | 
  |   pub fn assigned_count(&self) -> usize {
  | 

--[ Match #14 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\muxer.rs
   Pattern: \.(request|post|get)\(
  |   ) -> Option<&TopicName> {
  |     self
  |       .assigned
  |       .get(peer)
  |       .and_then(|conns| conns.get(connection))
  |   }
  | 
  | 

--[ Match #15 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\cache.rs
   Pattern: \.(request|post|get)\(
  |   }
  | 
  |   pub fn contains(&self, key: &T) -> bool {
  |     self.inner.get(key).is_some()
  |   }
  | 
  |   pub fn remove(&mut self, key: &T) -> bool {
  | 

--[ Match #16 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\cache.rs
   Pattern: \.(request|post|get)\(
  |   }
  | 
  |   pub fn contains_key(&self, key: &K) -> bool {
  |     self.get(key).is_some()
  |   }
  | 
  |   pub fn remove(&mut self, key: &K) -> Option<V> {
  | 

--[ Match #17 of 22 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\src\cache.rs
   Pattern: \.(request|post|get)\(
  |   }
  | 
  |   pub fn get(&self, key: &K) -> Option<&V> {
  |     if let Some(value) = self.data.get(key) {
  |       if value.1.elapsed() > self.lifespan {
  |         return None;
  |       }
  | 

--[ Match #18 of 22 ]--
   Rule Id: BD000600
       Tag: Security.Backdoor.LOLBAS.Windows
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\README.md
   Pattern: \s(advpack\.dll|appvlp|at|atbroker|bash|bginfo|bitsadmin|cdb|certutil|cl_invocation\.ps1|cl_mutexverifiers\.ps1|cmd|cmdkey|cmstp|comsvcs\.dll|control|csc|cscript|csi|devtoolslauncher|dfsvc|diskshadow|dnscmd|dnx|dotnet|dxcap|esentutl|eventvwr|excel|expand|extexport|extrac32|findstr|forfiles|ftp|gfxdownloadwrapper|gpscript|hh|ie4uinit|ieadvpack\.dll|ieaframe\.dll|ic|infdefaultinstall|installutil|jsc|makecab|manage-bde\.wsf|mavinject|mftrace|microsoft\.workflow\.compiler|mmc|msbuild|msconfig|msdeploy|msdt|mshta|mshtml\.dll|msc|msxsl|netsh|odbcconf|pcalua|pcwrun|pcwutl\.dll|pester\.bat|powerpnt|presentationhost|pubprn\.vbs|rcsi|reg|regasm|regedit|register-cimprovider|regsvcs|regsvr32|rpcping|rundll32|runonce|runscripthelper|sc|schtasks|scriptrunner|setupapi\.dll|shdocvw\.dll|shell32\.dll|slmgr\.vbs|sqldumper|sqlps|sqltoolsps|squirrel|syncappvpublishingserver|syncappvpublishingserver\.vbs|syssetup\.dll|te|tracker|tttracer|update|url\.dll|verclsid|vsjitdebugger|wab|winrm\.vbs|winword|wmic|wscript|wsl|wsreset|xwizard|zipfldr\.dll)\s
  | 
  | ```
  | 
  | The basic unit of p2p interaction is a Topic. A single topic is an distinct instance of the [HyparVi
  | 
  | The networking api purposefully does not expose any information about individual peers that are part
  | 
  | ## Usage
  | In your `Cargo.toml` add:
  | 
  | ```toml
  | [dependencies]
  | hypar = "1.0"
  | ```
  | 
  | ## Common use cases
  | 
  | #### Complete gossip example:
  | 
  | ```rust
  | 
  | // drives all networking across topics
  | let mut network = Network::default();
  | 
  | // join some topic by its name and a set of bootstrap nodes
  | let topic1 = network.jo

--[ Match #19 of 22 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\README.md
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  | Topic>;
  |   pub async fn runloop(mut self);
  | }
  | 
  | 
  | // after joining a topic:
  | pub struct Topic { ... }
  | 
  | impl Topic {
  |   pub fn gossip(&self, data: Bytes); 
  | }
  | 
  | // polling on new data gossiped by other peers
  | impl Stream for Topic {
  |   type Item = Bytes;
  |   fn poll_next(...) -> Poll<Option<Self::Item>>;
  | }
  | 
  | ```
  | 
  | The basic unit of p2p interaction is a Topic. A single topic is an distinct instance of the [HyparVi
  | 
  | The networking api purposefully does not expose any information about individual peers that are part
  | 
  | ## Usage
  | In your `Cargo.toml` add:
  | 

--[ Match #20 of 22 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\README.md
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  | 
  | ```
  | 
  | The basic unit of p2p interaction is a Topic. A single topic is an distinct instance of the [HyparVi
  | 
  | The networking api purposefully does not expose any information about individual peers that are part
  | 
  | ## Usage
  | In your `Cargo.toml` add:
  | 
  | ```toml
  | [dependencies]
  | hypar = "1.0"
  | ```
  | 
  | ## Common use cases
  | 
  | #### Complete gossip example:
  | 
  | ```rust
  | 
  | // drives all networking across topics
  | let mut network = Network::default();
  | 
  | // join some topic by its name and a set of bootstrap nodes
  | let topic1 = network.jo

--[ Match #21 of 22 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\README.md
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  | 
  | This crate implements a general-purpose infection-style gossiping protocol that can be used to form 
  | 
  | Communication between peers is encrypted using secure node-to-node channels. Peer identity is based 
  | 
  | The public API of this crate is:
  | 
  | 

--[ Match #22 of 22 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-hypar@1.0\hypar-1.0.3\README.md
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  | 
  | This crate implements a general-purpose infection-style gossiping protocol that can be used to form 
  | 
  | Communication between peers is encrypted using secure node-to-node channels. Peer identity is based 
  | 
  | The public API of this crate is:
  | 
  | 

22 matches found.
