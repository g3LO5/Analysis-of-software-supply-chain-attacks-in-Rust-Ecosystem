--[ Match #1 of 18 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\.cargo_vcs_info.json
   Pattern: ["'][a-z0-9]{40,}["']
  | {
  |   "git": {
  |     "sha1": "f31a18113048df30494cc7308450fcf163076c57"
  |   },
  |   "path_in_vcs": "ph"
  | }

--[ Match #2 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\keyset.rs
   Pattern: \.(request|post|get)\(
  |             for seg_i in 0..segments.len() {
  |                 let seg = &segments[seg_i];
  |                 let first_i = seg.first_index - segments[0].first_index;
  |                 let last_i = segments.get(seg_i+1).map_or_else(|| indices.len(), |s| s.first_index -
  |                 let indices = &mut indices[first_i..last_i];
  |                 let mut len = 0;
  |                 let mut i = 0;
  | 

--[ Match #3 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\gofunction.rs
   Pattern: \.(request|post|get)\(
  |             assert_eq!(initial_len, expected_initial_len);
  |             remaining.sort();
  |             assert_eq!(remaining, vec![1, 1]);
  |             test_mphf(&[2, 3, 4], |key| mphf.get(key));
  |         } else {
  |             assert!(false)
  |         }
  | 

--[ Match #4 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\gofunction.rs
   Pattern: \.(request|post|get)\(
  |             crate::fmph::keyset::CachedKeySet::dynamic(|| 0..LEN, usize::MAX),
  |             GOConf::default_biggest().into(),
  |             &mut crate::stats::BuildStatsPrinter::stdout());
  |         test_mphf_iter(LEN as usize, 0..LEN, |key| f.get(key));
  |         assert!(f.size_bytes() as f64 * (8.0/LEN as f64) < 2.57);
  |     }
  | 
  | 

--[ Match #5 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\gofunction.rs
   Pattern: \.(request|post|get)\(
  |         let goconf = GOConf::bps_bpg(Bits(3), bits_per_group);
  |         let h = GOFunction::from_slice_with_conf(to_hash, GOBuildConf::with_mt(goconf, false));
  |         //dbg!(h.size_bytes() as f64 * 8.0/to_hash.len() as f64);
  |         test_mphf(to_hash, |key| h.get(key));
  |         test_hash2_invariants(&h);
  |         test_read_write(&h);
  |         assert_eq!(h.len(), to_hash.len());
  | 

--[ Match #6 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\gofunction.rs
   Pattern: \.(request|post|get)\(
  |         let mut groups_before = 0u64;
  |         let mut level_nr = 0u32;
  |         loop {
  |             let level_size_groups = *self.level_sizes.get(level_nr as usize)?;
  |             /*let bit_index = self.conf.key_index(key, level_nr, level_size_groups,
  |                                                 |g| self.conf.bits_per_seed.get_seed(&self.group_see
  |             ); // wrong as bit_index_for_seed is called with wrong group */
  | 

--[ Match #7 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\function.rs
   Pattern: \.(request|post|get)\(
  |             assert_eq!(initial_len, expected_initial_len);
  |             remaining.sort();
  |             assert_eq!(remaining, vec![1, 1]);
  |             test_mphf(&[2, 3, 4], |key| mphf.get(key));
  |         } else {
  |             assert!(false)
  |         }
  | 

--[ Match #8 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\function.rs
   Pattern: \.(request|post|get)\(
  |         let f = Function::with_stats(
  |             crate::fmph::keyset::CachedKeySet::dynamic(|| 0..LEN, usize::MAX/*1_000_000_000*/),
  |             &mut crate::stats::BuildStatsPrinter::stdout());
  |         test_mphf_iter(LEN as usize, 0..LEN, |key| f.get(key));
  |         assert!(f.size_bytes() as f64 * (8.0/LEN as f64) < 2.9);
  |     }
  | 
  | 

--[ Match #9 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\function.rs
   Pattern: \.(request|post|get)\(
  |         const LEN: u64 = 50_000;
  |         let f = Function::new(
  |             crate::fmph::keyset::CachedKeySet::dynamic((|| 0..LEN, || (0..LEN).into_par_iter()), 10_
  |         test_mphf_iter(LEN as usize, 0..LEN, |key| f.get(key));
  |         assert!(f.size_bytes() as f64 * (8.0/LEN as f64) < 2.9);
  |     }
  | 
  | 

--[ Match #10 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\function.rs
   Pattern: \.(request|post|get)\(
  |         const LEN: u64 = 50_000;
  |         let f = Function::new(
  |             crate::fmph::keyset::CachedKeySet::dynamic(|| 0..LEN, 10_000));
  |         test_mphf_iter(LEN as usize, 0..LEN, |key| f.get(key));
  |         assert!(f.size_bytes() as f64 * (8.0/LEN as f64) < 2.9);
  |     }
  | 
  | 

--[ Match #11 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\function.rs
   Pattern: \.(request|post|get)\(
  | 
  |     fn test_with_input<K: Hash + Clone + Display + Sync>(to_hash: &[K]) {
  |         let h = Function::from_slice_with_conf(to_hash, BuildConf::mt(false));
  |         test_mphf(to_hash, |key| h.get(key));
  |         test_read_write(&h);
  |         assert_eq!(h.len(), to_hash.len());
  |     }
  | 

--[ Match #12 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\src\fmph\function.rs
   Pattern: \.(request|post|get)\(
  |         let mut array_begin_index = 0usize;
  |         let mut level_nr = 0u32;
  |         loop {
  |             let level_size = (*self.level_sizes.get(level_nr as usize)? as usize) << 6;
  |             let i = array_begin_index + self.index(key, level_nr, level_size);
  |             if self.array.content.get_bit(i) {
  |                 access_stats.found_on_level(level_nr);
  | 

--[ Match #13 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\README.md
   Pattern: \.(request|post|get)\(
  | let f = fmph::Function::from(keys.as_ref());
  | // f assigns each key a unique number from the set {0, 1, 2}
  | for k in keys { println!("The key {} is assigned the value {}.", k, f.get(&k).unwrap()); }
  | let mut values = [f.get(&'a').unwrap(), f.get(&'b').unwrap(), f.get(&'z').unwrap()];
  | values.sort();
  | assert_eq!(values, [0, 1, 2]);
  | ```
  | 

--[ Match #14 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\README.md
   Pattern: \.(request|post|get)\(
  | let f = fmph::Function::from(keys.as_ref());
  | // f assigns each key a unique number from the set {0, 1, 2}
  | for k in keys { println!("The key {} is assigned the value {}.", k, f.get(&k).unwrap()); }
  | let mut values = [f.get(&'a').unwrap(), f.get(&'b').unwrap(), f.get(&'z').unwrap()];
  | values.sort();
  | assert_eq!(values, [0, 1, 2]);
  | ```
  | 

--[ Match #15 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\README.md
   Pattern: \.(request|post|get)\(
  | let f = fmph::Function::from(keys.as_ref());
  | // f assigns each key a unique number from the set {0, 1, 2}
  | for k in keys { println!("The key {} is assigned the value {}.", k, f.get(&k).unwrap()); }
  | let mut values = [f.get(&'a').unwrap(), f.get(&'b').unwrap(), f.get(&'z').unwrap()];
  | values.sort();
  | assert_eq!(values, [0, 1, 2]);
  | ```
  | 

--[ Match #16 of 18 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\README.md
   Pattern: \.(request|post|get)\(
  | let keys = ['a', 'b', 'z'];
  | let f = fmph::Function::from(keys.as_ref());
  | // f assigns each key a unique number from the set {0, 1, 2}
  | for k in keys { println!("The key {} is assigned the value {}.", k, f.get(&k).unwrap()); }
  | let mut values = [f.get(&'a').unwrap(), f.get(&'b').unwrap(), f.get(&'z').unwrap()];
  | values.sort();
  | assert_eq!(values, [0, 1, 2]);
  | 

--[ Match #17 of 18 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\README.md
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  | A minimal perfect hash function (MPHF) is a bijection from a key set *K* to the set *{0, 1, ..., |K|
  | 
  | FMPH and FMPHGO can be constructed for any set *K* (given in advance) of hashable items and represen
  | FMPH and FMPHGO are fast (*O(1)*) to evaluate. Their construction requires very little auxiliary spa
  | 
  | # Bibliography
  | When using `ph` for research purposes, please cite the following paper which provides details on FMP
  | 

--[ Match #18 of 18 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-ph@0.8\ph-0.8.1\Cargo.toml.orig
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  | binout = { version="0.2", path="../binout" }
  | rayon = "1.5"
  | wyhash = { version="0.5", optional=true }
  | #wyhash_git = { git = "https://github.com/eldruin/wyhash-rs", package = "wyhash", optional=true }   
  | fnv = { version="1", optional=true }
  | 
  | 

18 matches found.
