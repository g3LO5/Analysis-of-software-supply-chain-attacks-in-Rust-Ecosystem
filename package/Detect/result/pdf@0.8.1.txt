--[ Match #1 of 275 ]--
   Rule Id: BD000801
       Tag: Security.Backdoor.ExecuteObfuscatedCode
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \.get\(.*(fromhex|decode)
  |         ]
  |     ), resolve)).transpose()?;
  |     let decode = dict.get("Decode").map(|p| Object::from_primitive(p.clone(), resolve)).transpose()?
  |     let decode_parms = dict.get("DecodeParms").map(|p| p.clone().resolve(resolve)?.into_dictionary()
  |     let filter = dict.remove("Filter").map(|p| expand_abbr(p,
  |         &[
  |             ("AHx", "ASCIIHexDecode"),
  | 

--[ Match #2 of 275 ]--
   Rule Id: BD000801
       Tag: Security.Backdoor.ExecuteObfuscatedCode
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \.get\(.*(fromhex|decode)
  |             ("I", "Indexed")
  |         ]
  |     ), resolve)).transpose()?;
  |     let decode = dict.get("Decode").map(|p| Object::from_primitive(p.clone(), resolve)).transpose()?
  |     let decode_parms = dict.get("DecodeParms").map(|p| p.clone().resolve(resolve)?.into_dictionary()
  |     let filter = dict.remove("Filter").map(|p| expand_abbr(p,
  |         &[
  | 

--[ Match #3 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let data_repeat_len = password.len() + block_size + u.len();
  |             data[..password.len()].copy_from_slice(password);
  |             data[password.len()..password.len() + block_size].copy_from_slice(&block[..block_size]);
  |             data[password.len() + block_size..data_repeat_len].copy_from_slice(u);
  |             for j in 1..64 {
  |                 data.copy_within(..data_repeat_len, j * data_repeat_len);
  |             }
  | 

--[ Match #4 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let aes = Aes128CbcEnc::new(&key, &iv);
  |             let data_repeat_len = password.len() + block_size + u.len();
  |             data[..password.len()].copy_from_slice(password);
  |             data[password.len()..password.len() + block_size].copy_from_slice(&block[..block_size]);
  |             data[password.len() + block_size..data_repeat_len].copy_from_slice(u);
  |             for j in 1..64 {
  |                 data.copy_within(..data_repeat_len, j * data_repeat_len);
  | 

--[ Match #5 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let aes = Aes128CbcEnc::new(&key, &iv);
  |             let data_repeat_len = password.len() + block_size + u.len();
  |             data[..password.len()].copy_from_slice(password);
  |             data[password.len()..password.len() + block_size].copy_from_slice(&block[..block_size]);
  |             data[password.len() + block_size..data_repeat_len].copy_from_slice(u);
  |             for j in 1..64 {
  |                 data.copy_within(..data_repeat_len, j * data_repeat_len);
  | 

--[ Match #6 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         while i < 64 || i < data[data_total_len - 1] as usize + 32 {
  |             let aes = Aes128CbcEnc::new(&key, &iv);
  |             let data_repeat_len = password.len() + block_size + u.len();
  |             data[..password.len()].copy_from_slice(password);
  |             data[password.len()..password.len() + block_size].copy_from_slice(&block[..block_size]);
  |             data[password.len() + block_size..data_repeat_len].copy_from_slice(u);
  |             for j in 1..64 {
  | 

--[ Match #7 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         while i < 64 || i < data[data_total_len - 1] as usize + 32 {
  |             let aes = Aes128CbcEnc::new(&key, &iv);
  |             let data_repeat_len = password.len() + block_size + u.len();
  |             data[..password.len()].copy_from_slice(password);
  |             data[password.len()..password.len() + block_size].copy_from_slice(&block[..block_size]);
  |             data[password.len() + block_size..data_repeat_len].copy_from_slice(u);
  |             for j in 1..64 {
  | 

--[ Match #8 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         let mut i = 0;
  |         while i < 64 || i < data[data_total_len - 1] as usize + 32 {
  |             let aes = Aes128CbcEnc::new(&key, &iv);
  |             let data_repeat_len = password.len() + block_size + u.len();
  |             data[..password.len()].copy_from_slice(password);
  |             data[password.len()..password.len() + block_size].copy_from_slice(&block[..block_size]);
  |             data[password.len() + block_size..data_repeat_len].copy_from_slice(u);
  | 

--[ Match #9 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         let mut sha512 = Sha512::new();
  | 
  |         let mut input_sha256 = Sha256::new();
  |         input_sha256.update(password);
  |         input_sha256.update(salt);
  |         input_sha256.update(u);
  |         let input = input_sha256.finalize();
  | 

--[ Match #10 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         }
  |     }
  | 
  |     fn revision_6_kdf(password: &[u8], salt: &[u8], u: &[u8]) -> [u8; 32] {
  |         let mut data = [0u8; (128 + 64 + 48) * 64];
  |         let mut data_total_len = 0;
  | 
  | 

--[ Match #11 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let zero_iv = GenericArray::from_slice(&[0u8; 16]);
  |             let key_slice = t!(Aes256CbcDec::new(&intermediate_key, zero_iv)
  |                 .decrypt_padded_mut::<NoPadding>(&mut wrapped_key)
  |                 .map_err(|_| PdfError::InvalidPassword));
  |             let mut key = [0u8; 32];
  |             key.copy_from_slice(key_slice);
  | 
  | 

--[ Match #12 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                         intermediate_kdf_hash.update(u);
  |                         (intermediate_kdf_hash.finalize(), oe)
  |                     } else {
  |                         err!(PdfError::InvalidPassword);
  |                     }
  |                 }
  |             };
  | 

--[ Match #13 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                     let owner_hash_computed = owner_check_hash.finalize();
  |                     if owner_hash_computed.as_slice() == owner_hash {
  |                         let mut intermediate_kdf_hash = Sha256::new();
  |                         intermediate_kdf_hash.update(password_encoded);
  |                         intermediate_kdf_hash.update(owner_key_salt);
  |                         intermediate_kdf_hash.update(u);
  |                         (intermediate_kdf_hash.finalize(), oe)
  | 

--[ Match #14 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                     (intermediate_kdf_hash.finalize(), ue)
  |                 } else {
  |                     let mut owner_check_hash = Sha256::new();
  |                     owner_check_hash.update(password_encoded);
  |                     owner_check_hash.update(owner_validation_salt);
  |                     owner_check_hash.update(u);
  |                     let owner_hash_computed = owner_check_hash.finalize();
  | 

--[ Match #15 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 #[allow(clippy::branches_sharing_code)]
  |                 if user_hash_computed.as_slice() == user_hash {
  |                     let mut intermediate_kdf_hash = Sha256::new();
  |                     intermediate_kdf_hash.update(password_encoded);
  |                     intermediate_kdf_hash.update(user_key_salt);
  |                     (intermediate_kdf_hash.finalize(), ue)
  |                 } else {
  | 

--[ Match #16 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 // level == 5
  | 
  |                 let mut user_check_hash = Sha256::new();
  |                 user_check_hash.update(password_encoded);
  |                 user_check_hash.update(user_validation_salt);
  |                 let user_hash_computed = user_check_hash.finalize();
  |                 #[allow(clippy::branches_sharing_code)]
  | 

--[ Match #17 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                             oe,
  |                         )
  |                     } else {
  |                         err!(PdfError::InvalidPassword);
  |                     }
  |                 }
  |             } else {
  | 

--[ Match #18 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                         Self::revision_6_kdf(password_encoded, owner_validation_salt, u);
  |                     if owner_hash_computed == owner_hash {
  |                         (
  |                             Self::revision_6_kdf(password_encoded, owner_key_salt, u).into(),
  |                             oe,
  |                         )
  |                     } else {
  | 

--[ Match #19 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                     )
  |                 } else {
  |                     let owner_hash_computed =
  |                         Self::revision_6_kdf(password_encoded, owner_validation_salt, u);
  |                     if owner_hash_computed == owner_hash {
  |                         (
  |                             Self::revision_6_kdf(password_encoded, owner_key_salt, u).into(),
  | 

--[ Match #20 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                     Self::revision_6_kdf(password_encoded, user_validation_salt, b"");
  |                 if user_hash_computed == user_hash {
  |                     (
  |                         Self::revision_6_kdf(password_encoded, user_key_salt, b"").into(),
  |                         ue,
  |                     )
  |                 } else {
  | 

--[ Match #21 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | 
  |             let (intermediate_key, mut wrapped_key) = if level == 6 {
  |                 let user_hash_computed =
  |                     Self::revision_6_kdf(password_encoded, user_validation_salt, b"");
  |                 if user_hash_computed == user_hash {
  |                     (
  |                         Self::revision_6_kdf(password_encoded, user_key_salt, b"").into(),
  | 

--[ Match #22 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let mut password_encoded = password_prepped.as_bytes();
  | 
  |             if password_encoded.len() > 127 {
  |                 password_encoded = &password_encoded[..127];
  |             }
  | 
  |             let ue = t!(dict.ue.as_ref().ok_or_else(|| PdfError::MissingEntry {
  | 

--[ Match #23 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let mut password_encoded = password_prepped.as_bytes();
  | 
  |             if password_encoded.len() > 127 {
  |                 password_encoded = &password_encoded[..127];
  |             }
  | 
  |             let ue = t!(dict.ue.as_ref().ok_or_else(|| PdfError::MissingEntry {
  | 

--[ Match #24 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 t!(stringprep::saslprep(&password_unicode).map_err(|_| PdfError::InvalidPassword));
  |             let mut password_encoded = password_prepped.as_bytes();
  | 
  |             if password_encoded.len() > 127 {
  |                 password_encoded = &password_encoded[..127];
  |             }
  | 
  | 

--[ Match #25 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 t!(String::from_utf8(pass.to_vec()).map_err(|_| PdfError::InvalidPassword));
  |             let password_prepped =
  |                 t!(stringprep::saslprep(&password_unicode).map_err(|_| PdfError::InvalidPassword));
  |             let mut password_encoded = password_prepped.as_bytes();
  | 
  |             if password_encoded.len() > 127 {
  |                 password_encoded = &password_encoded[..127];
  | 

--[ Match #26 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 t!(String::from_utf8(pass.to_vec()).map_err(|_| PdfError::InvalidPassword));
  |             let password_prepped =
  |                 t!(stringprep::saslprep(&password_unicode).map_err(|_| PdfError::InvalidPassword));
  |             let mut password_encoded = password_prepped.as_bytes();
  | 
  |             if password_encoded.len() > 127 {
  |                 password_encoded = &password_encoded[..127];
  | 

--[ Match #27 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let password_unicode =
  |                 t!(String::from_utf8(pass.to_vec()).map_err(|_| PdfError::InvalidPassword));
  |             let password_prepped =
  |                 t!(stringprep::saslprep(&password_unicode).map_err(|_| PdfError::InvalidPassword));
  |             let mut password_encoded = password_prepped.as_bytes();
  | 
  |             if password_encoded.len() > 127 {
  | 

--[ Match #28 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let password_unicode =
  |                 t!(String::from_utf8(pass.to_vec()).map_err(|_| PdfError::InvalidPassword));
  |             let password_prepped =
  |                 t!(stringprep::saslprep(&password_unicode).map_err(|_| PdfError::InvalidPassword));
  |             let mut password_encoded = password_prepped.as_bytes();
  | 
  |             if password_encoded.len() > 127 {
  | 

--[ Match #29 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | 
  |             let password_unicode =
  |                 t!(String::from_utf8(pass.to_vec()).map_err(|_| PdfError::InvalidPassword));
  |             let password_prepped =
  |                 t!(stringprep::saslprep(&password_unicode).map_err(|_| PdfError::InvalidPassword));
  |             let mut password_encoded = password_prepped.as_bytes();
  | 
  | 

--[ Match #30 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let owner_key_salt = &o[40..48];
  | 
  |             let password_unicode =
  |                 t!(String::from_utf8(pass.to_vec()).map_err(|_| PdfError::InvalidPassword));
  |             let password_prepped =
  |                 t!(stringprep::saslprep(&password_unicode).map_err(|_| PdfError::InvalidPassword));
  |             let mut password_encoded = password_prepped.as_bytes();
  | 

--[ Match #31 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let owner_validation_salt = &o[32..40];
  |             let owner_key_salt = &o[40..48];
  | 
  |             let password_unicode =
  |                 t!(String::from_utf8(pass.to_vec()).map_err(|_| PdfError::InvalidPassword));
  |             let password_prepped =
  |                 t!(stringprep::saslprep(&password_unicode).map_err(|_| PdfError::InvalidPassword));
  | 

--[ Match #32 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                     let decoder = Decoder::new(key, key_size, method, dict.encrypt_metadata);
  |                     Ok(decoder)
  |                 } else {
  |                     Err(PdfError::InvalidPassword)
  |                 }
  |             }
  |         } else if level == 5 || level == 6 {
  | 

--[ Match #33 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                     &unwrapped_user_password,
  |                 );
  | 
  |                 if check_password_rc4(level, dict.u.as_bytes(), id, &key[..key_size]) {
  |                     let decoder = Decoder::new(key, key_size, method, dict.encrypt_metadata);
  |                     Ok(decoder)
  |                 } else {
  | 

--[ Match #34 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                     key_size,
  |                     dict,
  |                     id,
  |                     &unwrapped_user_password,
  |                 );
  | 
  |                 if check_password_rc4(level, dict.u.as_bytes(), id, &key[..key_size]) {
  | 

--[ Match #35 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 }
  |                 let unwrapped_user_password = data;
  | 
  |                 let key = key_derivation_user_password_rc4(
  |                     level,
  |                     key_size,
  |                     dict,
  | 

--[ Match #36 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                     }
  |                     Rc4::encrypt(&round_key, &mut data);
  |                 }
  |                 let unwrapped_user_password = data;
  | 
  |                 let key = key_derivation_user_password_rc4(
  |                     level,
  | 

--[ Match #37 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 let mut data = dict.o.as_bytes().to_vec();
  |                 let rounds = if level == 2 { 1u8 } else { 20u8 };
  |                 for round in 0..rounds {
  |                     let mut round_key = password_wrap_key.clone();
  |                     for byte in round_key.iter_mut() {
  |                         *byte ^= round;
  |                     }
  | 

--[ Match #38 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 let decoder = Decoder::new(key, key_size, method, dict.encrypt_metadata);
  |                 Ok(decoder)
  |             } else {
  |                 let password_wrap_key = key_derivation_owner_password_rc4(level, key_size, pass)?;
  |                 let mut data = dict.o.as_bytes().to_vec();
  |                 let rounds = if level == 2 { 1u8 } else { 20u8 };
  |                 for round in 0..rounds {
  | 

--[ Match #39 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 let decoder = Decoder::new(key, key_size, method, dict.encrypt_metadata);
  |                 Ok(decoder)
  |             } else {
  |                 let password_wrap_key = key_derivation_owner_password_rc4(level, key_size, pass)?;
  |                 let mut data = dict.o.as_bytes().to_vec();
  |                 let rounds = if level == 2 { 1u8 } else { 20u8 };
  |                 for round in 0..rounds {
  | 

--[ Match #40 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             let key_size = key_bits as usize / 8;
  |             let key = key_derivation_user_password_rc4(level, key_size, dict, id, pass);
  | 
  |             if check_password_rc4(level, dict.u.as_bytes(), id, &key[..std::cmp::min(key_size, 16)])
  |                 let decoder = Decoder::new(key, key_size, method, dict.encrypt_metadata);
  |                 Ok(decoder)
  |             } else {
  | 

--[ Match #41 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         };
  |         if level <= 4 {
  |             let key_size = key_bits as usize / 8;
  |             let key = key_derivation_user_password_rc4(level, key_size, dict, id, pass);
  | 
  |             if check_password_rc4(level, dict.u.as_bytes(), id, &key[..std::cmp::min(key_size, 16)])
  |                 let decoder = Decoder::new(key, key_size, method, dict.encrypt_metadata);
  | 

--[ Match #42 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             key
  |         }
  | 
  |         fn key_derivation_owner_password_rc4(
  |             revision: u32,
  |             key_size: usize,
  |             pass: &[u8],
  | 

--[ Match #43 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             }
  |         }
  | 
  |         fn key_derivation_user_password_rc4(
  |             revision: u32,
  |             key_size: usize,
  |             dict: &CryptDict,
  | 

--[ Match #44 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             if revision == 2 {
  |                 check_password_rev_2(document_u, key)
  |             } else {
  |                 check_password_rev_3_4(document_u, id, key)
  |             }
  |         }
  | 
  | 

--[ Match #45 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | 
  |         fn check_password_rc4(revision: u32, document_u: &[u8], id: &[u8], key: &[u8]) -> bool {
  |             if revision == 2 {
  |                 check_password_rev_2(document_u, key)
  |             } else {
  |                 check_password_rev_3_4(document_u, id, key)
  |             }
  | 

--[ Match #46 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             compute_u_rev_3_4(id, key) == document_u[..16]
  |         }
  | 
  |         fn check_password_rc4(revision: u32, document_u: &[u8], id: &[u8], key: &[u8]) -> bool {
  |             if revision == 2 {
  |                 check_password_rev_2(document_u, key)
  |             } else {
  | 

--[ Match #47 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             data.to_vec()
  |         }
  | 
  |         fn check_password_rev_3_4(document_u: &[u8], id: &[u8], key: &[u8]) -> bool {
  |             compute_u_rev_3_4(id, key) == document_u[..16]
  |         }
  | 
  | 

--[ Match #48 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |             data
  |         }
  | 
  |         fn check_password_rev_2(document_u: &[u8], key: &[u8]) -> bool {
  |             compute_u_rev_2(key) == document_u
  |         }
  | 
  | 

--[ Match #49 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         }
  |     }
  | 
  |     pub fn from_password(dict: &CryptDict, id: &[u8], pass: &[u8]) -> Result<Decoder> {
  |         fn compute_u_rev_2(key: &[u8]) -> Vec<u8> {
  |             // algorithm 4
  |             let mut data = PADDING.to_vec();
  | 

--[ Match #50 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | }
  | impl Decoder {
  |     pub fn default(dict: &CryptDict, id: &[u8]) -> Result<Decoder> {
  |         Decoder::from_password(dict, id, b"")
  |     }
  | 
  |     fn key(&self) -> &[u8] {
  | 

--[ Match #51 of 275 ]--
   Rule Id: BD000801
       Tag: Security.Backdoor.ExecuteObfuscatedCode
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\enc.rs
   Pattern: \.get\(.*(fromhex|decode)
  |     JPX_DECODER.get().ok_or_else(|| PdfError::Other { msg: "jp2k decoder not set".into()})?(data)
  | }
  | pub fn jbig2_decode(data: &[u8]) -> Result<Vec<u8>> {
  |     JBIG2_DECODER.get().ok_or_else(|| PdfError::Other { msg: "jbig2 decoder not set".into()})?(data)
  | }
  | 
  | pub fn decode(data: &[u8], filter: &StreamFilter) -> Result<Vec<u8>> {
  | 

--[ Match #52 of 275 ]--
   Rule Id: BD000801
       Tag: Security.Backdoor.ExecuteObfuscatedCode
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\enc.rs
   Pattern: \.get\(.*(fromhex|decode)
  | }
  | 
  | pub fn jpx_decode(data: &[u8]) -> Result<Vec<u8>> {
  |     JPX_DECODER.get().ok_or_else(|| PdfError::Other { msg: "jp2k decoder not set".into()})?(data)
  | }
  | pub fn jbig2_decode(data: &[u8]) -> Result<Vec<u8>> {
  |     JBIG2_DECODER.get().ok_or_else(|| PdfError::Other { msg: "jbig2 decoder not set".into()})?(data)
  | 

--[ Match #53 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\tests\integration.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 println!("\n\n == Now testing `{}` ==\n", path.to_str().unwrap());
  | 
  |                 let path = path.to_str().unwrap();
  |                 let file = run!(FileOptions::uncached().password(b"ownerpassword").open(path));
  |                 for i in 0 .. file.num_pages() {
  |                     println!("\nRead page {}", i);
  |                     let _ = file.get_page(i);
  | 

--[ Match #54 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\tests\integration.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 println!("\n\n == Now testing `{}` ==\n", path.to_str().unwrap());
  | 
  |                 let path = path.to_str().unwrap();
  |                 let file = run!(FileOptions::uncached().password(b"ownerpassword").open(path));
  |                 for i in 0 .. file.num_pages() {
  |                     println!("\nRead page {}", i);
  |                     let _ = file.get_page(i);
  | 

--[ Match #55 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\tests\integration.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | 
  | #[test]
  | fn owner_password() {
  |     for entry in glob(file_path!("password_protected/*.pdf"))
  |         .expect("Failed to read glob pattern")
  |     {
  |         match entry {
  | 

--[ Match #56 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\tests\integration.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | }
  | 
  | #[test]
  | fn owner_password() {
  |     for entry in glob(file_path!("password_protected/*.pdf"))
  |         .expect("Failed to read glob pattern")
  |     {
  | 

--[ Match #57 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\tests\integration.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 println!("\n\n == Now testing `{}` ==\n", path.to_str().unwrap());
  | 
  |                 let path = path.to_str().unwrap();
  |                 let file = run!(FileOptions::uncached().password(b"userpassword").open(path));
  |                 for i in 0 .. file.num_pages() {
  |                     println!("\nRead page {}", i);
  |                     let _ = file.get_page(i);
  | 

--[ Match #58 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\tests\integration.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 println!("\n\n == Now testing `{}` ==\n", path.to_str().unwrap());
  | 
  |                 let path = path.to_str().unwrap();
  |                 let file = run!(FileOptions::uncached().password(b"userpassword").open(path));
  |                 for i in 0 .. file.num_pages() {
  |                     println!("\nRead page {}", i);
  |                     let _ = file.get_page(i);
  | 

--[ Match #59 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\tests\integration.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | 
  | #[test]
  | fn user_password() {
  |     for entry in glob(file_path!("password_protected/*.pdf"))
  |         .expect("Failed to read glob pattern")
  |     {
  |         match entry {
  | 

--[ Match #60 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\tests\integration.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | }
  | 
  | #[test]
  | fn user_password() {
  |     for entry in glob(file_path!("password_protected/*.pdf"))
  |         .expect("Failed to read glob pattern")
  |     {
  | 

--[ Match #61 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | {
  |     fn load_data(backend: B, password: &[u8], options: ParseOptions, object_cache: OC, stream_cache:
  |         let mut storage = Storage::with_cache(backend, options, object_cache, stream_cache)?;
  |         let trailer = storage.load_storage_and_trailer_password(password)?;
  |         let trailer = t!(Trailer::from_primitive(
  |             Primitive::Dictionary(trailer),
  |             &storage,
  | 

--[ Match #62 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | {
  |     fn load_data(backend: B, password: &[u8], options: ParseOptions, object_cache: OC, stream_cache:
  |         let mut storage = Storage::with_cache(backend, options, object_cache, stream_cache)?;
  |         let trailer = storage.load_storage_and_trailer_password(password)?;
  |         let trailer = t!(Trailer::from_primitive(
  |             Primitive::Dictionary(trailer),
  |             &storage,
  | 

--[ Match #63 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |     OC: Cache<Result<AnySync, Arc<PdfError>>>,
  |     SC: Cache<Result<Arc<[u8]>, Arc<PdfError>>>
  | {
  |     fn load_data(backend: B, password: &[u8], options: ParseOptions, object_cache: OC, stream_cache:
  |         let mut storage = Storage::with_cache(backend, options, object_cache, stream_cache)?;
  |         let trailer = storage.load_storage_and_trailer_password(password)?;
  |         let trailer = t!(Trailer::from_primitive(
  | 

--[ Match #64 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |     /// load data from the given backend
  |     pub fn load<B: Backend>(self, backend: B) -> Result<File<B, OC, SC>> {
  |         let FileOptions { oc, sc, password, parse_options } = self;
  |         File::load_data(backend, password, parse_options, oc, sc)
  |     }
  | }
  | 
  | 

--[ Match #65 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | 
  |     /// load data from the given backend
  |     pub fn load<B: Backend>(self, backend: B) -> Result<File<B, OC, SC>> {
  |         let FileOptions { oc, sc, password, parse_options } = self;
  |         File::load_data(backend, password, parse_options, oc, sc)
  |     }
  | }
  | 

--[ Match #66 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         FileOptions {
  |             oc,
  |             sc,
  |             password,
  |             parse_options
  |         }
  |     }
  | 

--[ Match #67 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         }
  |     }
  |     pub fn cache<O, S>(self, oc: O, sc: S) -> FileOptions<'a, O, S> {
  |         let FileOptions { oc: _, sc: _, password, parse_options } = self;
  |         FileOptions {
  |             oc,
  |             sc,
  | 

--[ Match #68 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | {
  |     pub fn password(self, password: &'a [u8]) -> FileOptions<'a, OC, SC> {
  |         FileOptions {
  |             password,
  |             .. self
  |         }
  |     }
  | 

--[ Match #69 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |     OC: Cache<Result<AnySync, Arc<PdfError>>>,
  |     SC: Cache<Result<Arc<[u8]>, Arc<PdfError>>>
  | {
  |     pub fn password(self, password: &'a [u8]) -> FileOptions<'a, OC, SC> {
  |         FileOptions {
  |             password,
  |             .. self
  | 

--[ Match #70 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |     OC: Cache<Result<AnySync, Arc<PdfError>>>,
  |     SC: Cache<Result<Arc<[u8]>, Arc<PdfError>>>
  | {
  |     pub fn password(self, password: &'a [u8]) -> FileOptions<'a, OC, SC> {
  |         FileOptions {
  |             password,
  |             .. self
  | 

--[ Match #71 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         FileOptions {
  |             oc: SyncCache::new(),
  |             sc: SyncCache::new(),
  |             password: b"",
  |             parse_options: ParseOptions::strict()
  |         }
  |     }
  | 

--[ Match #72 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         FileOptions {
  |             oc: NoCache,
  |             sc: NoCache,
  |             password: b"",
  |             parse_options: ParseOptions::strict()
  |         }
  |     }
  | 

--[ Match #73 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  | pub struct FileOptions<'a, OC, SC> {
  |     oc: OC,
  |     sc: SC,
  |     password: &'a [u8],
  |     parse_options: ParseOptions,
  | }
  | impl FileOptions<'static, NoCache, NoCache> {
  | 

--[ Match #74 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 .as_string()?
  |                 .as_bytes();
  |             let dict = CryptDict::from_primitive(crypt.clone(), self)?;
  |             self.decoder = Some(t!(Decoder::from_password(&dict, key, password)));
  |             if let Primitive::Reference(reference) = crypt {
  |                 self.decoder.as_mut().unwrap().encrypt_indirect_object = Some(*reference);
  |             }
  | 

--[ Match #75 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |                 .as_string()?
  |                 .as_bytes();
  |             let dict = CryptDict::from_primitive(crypt.clone(), self)?;
  |             self.decoder = Some(t!(Decoder::from_password(&dict, key, password)));
  |             if let Primitive::Reference(reference) = crypt {
  |                 self.decoder.as_mut().unwrap().encrypt_indirect_object = Some(*reference);
  |             }
  | 

--[ Match #76 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         self.load_storage_and_trailer_password(b"")
  |     }
  | 
  |     pub fn load_storage_and_trailer_password(&mut self, password: &[u8]) -> Result<Dictionary> {
  |         let (refs, trailer) = t!(self.backend.read_xref_table_and_trailer(self.start_offset, self));
  |         self.refs = refs;
  | 
  | 

--[ Match #77 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |         self.load_storage_and_trailer_password(b"")
  |     }
  | 
  |     pub fn load_storage_and_trailer_password(&mut self, password: &[u8]) -> Result<Dictionary> {
  |         let (refs, trailer) = t!(self.backend.read_xref_table_and_trailer(self.start_offset, self));
  |         self.refs = refs;
  | 
  | 

--[ Match #78 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |     }
  | 
  |     pub fn load_storage_and_trailer(&mut self) -> Result<Dictionary> {
  |         self.load_storage_and_trailer_password(b"")
  |     }
  | 
  |     pub fn load_storage_and_trailer_password(&mut self, password: &[u8]) -> Result<Dictionary> {
  | 

--[ Match #79 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\error.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |     UnspecifiedXRefEntry {id: ObjNr},
  | 
  |     #[snafu(display("Invalid password"))]
  |     InvalidPassword,
  | 
  |     #[snafu(display("Decryption failure"))]
  |     DecryptionFailure,
  | 

--[ Match #80 of 275 ]--
   Rule Id: BD000701
       Tag: Security.Backdoor.DataExfiltration.Token
  Severity: Important, Confidence: High
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\error.rs
   Pattern: (npm owner|password|htpasswd|auth_?token|secret_?key|private_?key|authorized_keys?|npmrc|\.ssh|usersecrets?|api_?keys|nuget\.config|\.identityservice)
  |     #[snafu(display("Entry {} in xref table unspecified", id))]
  |     UnspecifiedXRefEntry {id: ObjNr},
  | 
  |     #[snafu(display("Invalid password"))]
  |     InvalidPassword,
  | 
  |     #[snafu(display("Decryption failure"))]
  | 

--[ Match #81 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_x86_64_msvc"
  | version = "0.48.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a"
  | 

--[ Match #82 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_x86_64_msvc"
  | version = "0.42.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0"
  | 
  | [[package]]
  | name = "windows_x86_64_msvc"
  | 

--[ Match #83 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_x86_64_gnullvm"
  | version = "0.48.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953"
  | 
  | [[package]]
  | name = "windows_x86_64_msvc"
  | 

--[ Match #84 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_x86_64_gnullvm"
  | version = "0.42.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3"
  | 
  | [[package]]
  | name = "windows_x86_64_gnullvm"
  | 

--[ Match #85 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_x86_64_gnu"
  | version = "0.48.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1"
  | 
  | [[package]]
  | name = "windows_x86_64_gnullvm"
  | 

--[ Match #86 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_x86_64_gnu"
  | version = "0.42.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36"
  | 
  | [[package]]
  | name = "windows_x86_64_gnu"
  | 

--[ Match #87 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_i686_msvc"
  | version = "0.48.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00"
  | 
  | [[package]]
  | name = "windows_x86_64_gnu"
  | 

--[ Match #88 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_i686_msvc"
  | version = "0.42.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060"
  | 
  | [[package]]
  | name = "windows_i686_msvc"
  | 

--[ Match #89 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_i686_gnu"
  | version = "0.48.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241"
  | 
  | [[package]]
  | name = "windows_i686_msvc"
  | 

--[ Match #90 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_i686_gnu"
  | version = "0.42.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f"
  | 
  | [[package]]
  | name = "windows_i686_gnu"
  | 

--[ Match #91 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_aarch64_msvc"
  | version = "0.48.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3"
  | 
  | [[package]]
  | name = "windows_i686_gnu"
  | 

--[ Match #92 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_aarch64_msvc"
  | version = "0.42.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43"
  | 
  | [[package]]
  | name = "windows_aarch64_msvc"
  | 

--[ Match #93 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_aarch64_gnullvm"
  | version = "0.48.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc"
  | 
  | [[package]]
  | name = "windows_aarch64_msvc"
  | 

--[ Match #94 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows_aarch64_gnullvm"
  | version = "0.42.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8"
  | 
  | [[package]]
  | name = "windows_aarch64_gnullvm"
  | 

--[ Match #95 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows-targets"
  | version = "0.48.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5"
  | dependencies = [
  |  "windows_aarch64_gnullvm 0.48.0",
  |  "windows_aarch64_msvc 0.48.0",
  | 

--[ Match #96 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows-targets"
  | version = "0.42.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071"
  | dependencies = [
  |  "windows_aarch64_gnullvm 0.42.2",
  |  "windows_aarch64_msvc 0.42.2",
  | 

--[ Match #97 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows-sys"
  | version = "0.48.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
  | dependencies = [
  |  "windows-targets 0.48.0",
  | ]
  | 

--[ Match #98 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "windows-sys"
  | version = "0.45.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0"
  | dependencies = [
  |  "windows-targets 0.42.2",
  | ]
  | 

--[ Match #99 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "weezl"
  | version = "0.1.7"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "9193164d4de03a926d909d3bc7c30543cecb35400c02114792c2cae20d5e2dbb"
  | 
  | [[package]]
  | name = "windows-sys"
  | 

--[ Match #100 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "version_check"
  | version = "0.9.4"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"
  | 
  | [[package]]
  | name = "weezl"
  | 

--[ Match #101 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "unicode-normalization"
  | version = "0.1.22"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921"
  | dependencies = [
  |  "tinyvec",
  | ]
  | 

--[ Match #102 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "unicode-ident"
  | version = "1.0.8"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "e5464a87b239f13a63a501f2701565754bae92d243d4bb7eb12f6d57d2269bf4"
  | 
  | [[package]]
  | name = "unicode-normalization"
  | 

--[ Match #103 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "unicode-bidi"
  | version = "0.3.13"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "92888ba5573ff080736b3648696b70cafad7d250551175acbaa4e0385b3e1460"
  | 
  | [[package]]
  | name = "unicode-ident"
  | 

--[ Match #104 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "typenum"
  | version = "1.16.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "497961ef93d974e23eb6f433eb5fe1b7930b659f06d12dec6fc44a8f554c0bba"
  | 
  | [[package]]
  | name = "unicode-bidi"
  | 

--[ Match #105 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "tinyvec_macros"
  | version = "0.1.1"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"
  | 
  | [[package]]
  | name = "typenum"
  | 

--[ Match #106 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "tinyvec"
  | version = "1.6.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50"
  | dependencies = [
  |  "tinyvec_macros",
  | ]
  | 

--[ Match #107 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "tempfile"
  | version = "3.5.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "b9fbec84f381d5795b08656e4912bec604d162bff9291d6189a78f4c8ab87998"
  | dependencies = [
  |  "cfg-if",
  |  "fastrand",
  | 

--[ Match #108 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "syn"
  | version = "2.0.15"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "a34fcf3e8b60f57e6a14301a2e916d323af98b0ea63c599441eec8558660c822"
  | dependencies = [
  |  "proc-macro2",
  |  "quote",
  | 

--[ Match #109 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "syn"
  | version = "1.0.109"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"
  | dependencies = [
  |  "proc-macro2",
  |  "quote",
  | 

--[ Match #110 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "stringprep"
  | version = "0.1.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "8ee348cb74b87454fff4b551cbf727025810a004f88aeacae7f85b87f4e9a1c1"
  | dependencies = [
  |  "unicode-bidi",
  |  "unicode-normalization",
  | 

--[ Match #111 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "snafu-derive"
  | version = "0.7.4"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "475b3bbe5245c26f2d8a6f62d67c1f30eb9fffeccee721c45d162c3ebbdf81b2"
  | dependencies = [
  |  "heck",
  |  "proc-macro2",
  | 

--[ Match #112 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "snafu"
  | version = "0.7.4"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "cb0656e7e3ffb70f6c39b3c2a86332bb74aa3c679da781642590f3c1118c5045"
  | dependencies = [
  |  "doc-comment",
  |  "snafu-derive",
  | 

--[ Match #113 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "sha2"
  | version = "0.10.6"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "82e6b795fe2e3b1e845bafcb27aa35405c4d47cdfc92af5fc8d3002f76cebdc0"
  | dependencies = [
  |  "cfg-if",
  |  "cpufeatures",
  | 

--[ Match #114 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "scopeguard"
  | version = "1.1.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"
  | 
  | [[package]]
  | name = "sha2"
  | 

--[ Match #115 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "rustix"
  | version = "0.37.11"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "85597d61f83914ddeba6a47b3b8ffe7365107221c2e557ed94426489fefb5f77"
  | dependencies = [
  |  "bitflags",
  |  "errno",
  | 

--[ Match #116 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "redox_syscall"
  | version = "0.3.5"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29"
  | dependencies = [
  |  "bitflags",
  | ]
  | 

--[ Match #117 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "rayon-core"
  | version = "1.11.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "4b8f95bd6966f5c87776639160a66bd8ab9895d9d4ab01ddba9fc60661aebe8d"
  | dependencies = [
  |  "crossbeam-channel",
  |  "crossbeam-deque",
  | 

--[ Match #118 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "rayon"
  | version = "1.7.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "1d2df5196e37bcc87abebc0053e20787d73847bb33134a69841207dd0a47f03b"
  | dependencies = [
  |  "either",
  |  "rayon-core",
  | 

--[ Match #119 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "quote"
  | version = "1.0.26"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "4424af4bf778aae2051a77b60283332f386554255d722233d09fbfc7e30da2fc"
  | dependencies = [
  |  "proc-macro2",
  | ]
  | 

--[ Match #120 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "proc-macro2"
  | version = "1.0.56"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "2b63bdb0cd06f1f4dedf69b254734f9b45af66e4a031e42a7480257d9898b435"
  | dependencies = [
  |  "unicode-ident",
  | ]
  | 

--[ Match #121 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "pdf_derive"
  | version = "0.1.22"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "7f4007262775d0798de87b15cbc64cf1aed5f7ee87eec847e297b69d8ed4b4f8"
  | dependencies = [
  |  "proc-macro2",
  |  "quote",
  | 

--[ Match #122 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "once_cell"
  | version = "1.17.1"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3"
  | 
  | [[package]]
  | name = "pdf"
  | 

--[ Match #123 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "num_cpus"
  | version = "1.15.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "0fac9e2da13b5eb447a6ce3d392f23a29d8694bff781bf03a16cd9ac8697593b"
  | dependencies = [
  |  "hermit-abi 0.2.6",
  |  "libc",
  | 

--[ Match #124 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "num-traits"
  | version = "0.2.15"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd"
  | dependencies = [
  |  "autocfg",
  | ]
  | 

--[ Match #125 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "memoffset"
  | version = "0.8.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "d61c719bcfbcf5d62b3a09efa6088de8c54bc0bfcd3ea7ae39fcc186108b8de1"
  | dependencies = [
  |  "autocfg",
  | ]
  | 

--[ Match #126 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "memmap2"
  | version = "0.5.10"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "83faa42c0a078c393f6b29d5db232d8be22776a891f8f56e5284faee4a20b327"
  | dependencies = [
  |  "libc",
  | ]
  | 

--[ Match #127 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "md5"
  | version = "0.7.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "490cc448043f947bae3cbee9c203358d62dbee0db12107a74be5c30ccfd09771"
  | 
  | [[package]]
  | name = "memmap2"
  | 

--[ Match #128 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "log"
  | version = "0.4.17"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e"
  | dependencies = [
  |  "cfg-if",
  | ]
  | 

--[ Match #129 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "linux-raw-sys"
  | version = "0.3.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "3f508063cc7bb32987c71511216bd5a32be15bccb6a80b52df8b9d7f01fc3aa2"
  | 
  | [[package]]
  | name = "log"
  | 

--[ Match #130 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "libc"
  | version = "0.2.141"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "3304a64d199bb964be99741b7a14d26972741915b3649639149b2479bb46f4b5"
  | 
  | [[package]]
  | name = "linux-raw-sys"
  | 

--[ Match #131 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "jpeg-decoder"
  | version = "0.3.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "bc0000e42512c92e31c2252315bda326620a4e034105e900c98ec492fa077b3e"
  | dependencies = [
  |  "rayon",
  | ]
  | 

--[ Match #132 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "itertools"
  | version = "0.10.5"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473"
  | dependencies = [
  |  "either",
  | ]
  | 

--[ Match #133 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "istring"
  | version = "0.3.3"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "80fa5ca8bf0d6cc95e94ac834a7c27da3daacd089dc6284d85df18db23510664"
  | dependencies = [
  |  "datasize",
  | ]
  | 

--[ Match #134 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "io-lifetimes"
  | version = "1.0.10"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "9c66c74d2ae7e79a5a8f7ac924adbe38ee42a859c6539ad869eb51f0b52dc220"
  | dependencies = [
  |  "hermit-abi 0.3.1",
  |  "libc",
  | 

--[ Match #135 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "instant"
  | version = "0.1.12"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"
  | dependencies = [
  |  "cfg-if",
  | ]
  | 

--[ Match #136 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "inout"
  | version = "0.1.3"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5"
  | dependencies = [
  |  "block-padding",
  |  "generic-array",
  | 

--[ Match #137 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "inflate"
  | version = "0.4.5"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "1cdb29978cc5797bd8dcc8e5bf7de604891df2a8dc576973d71a281e916db2ff"
  | dependencies = [
  |  "adler32",
  | ]
  | 

--[ Match #138 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "hermit-abi"
  | version = "0.3.1"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286"
  | 
  | [[package]]
  | name = "inflate"
  | 

--[ Match #139 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "hermit-abi"
  | version = "0.2.6"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7"
  | dependencies = [
  |  "libc",
  | ]
  | 

--[ Match #140 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "heck"
  | version = "0.4.1"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"
  | 
  | [[package]]
  | name = "hermit-abi"
  | 

--[ Match #141 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "globalcache"
  | version = "0.2.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "469dba5c15b33d67400508ff1f640e8906fa6c8d5ee80540203eb9029ce475df"
  | dependencies = [
  |  "async-trait",
  | ]
  | 

--[ Match #142 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "glob"
  | version = "0.3.1"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b"
  | 
  | [[package]]
  | name = "globalcache"
  | 

--[ Match #143 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "generic-array"
  | version = "0.14.7"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a"
  | dependencies = [
  |  "typenum",
  |  "version_check",
  | 

--[ Match #144 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "fax_derive"
  | version = "0.1.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "3c1d7ffc9f2dc8316348c75281a99c8fdc60c1ddf4f82a366d117bf1b74d5a39"
  | dependencies = [
  |  "proc-macro2",
  |  "quote",
  | 

--[ Match #145 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "fax"
  | version = "0.2.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "b2cec1797683c06c2f3de5edb3fde4d99c70e96f3204f6aaff944078353e5c55"
  | dependencies = [
  |  "fax_derive",
  | ]
  | 

--[ Match #146 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "fastrand"
  | version = "1.9.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be"
  | dependencies = [
  |  "instant",
  | ]
  | 

--[ Match #147 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "euclid"
  | version = "0.22.9"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "87f253bc5c813ca05792837a0ff4b3a580336b224512d48f7eda1d7dd9210787"
  | dependencies = [
  |  "num-traits",
  | ]
  | 

--[ Match #148 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "errno-dragonfly"
  | version = "0.1.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf"
  | dependencies = [
  |  "cc",
  |  "libc",
  | 

--[ Match #149 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "errno"
  | version = "0.3.1"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "4bcfec3a70f97c962c307b2d2c56e358cf1d00b558d74262b5f929ee8cc7e73a"
  | dependencies = [
  |  "errno-dragonfly",
  |  "libc",
  | 

--[ Match #150 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "either"
  | version = "1.8.1"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91"
  | 
  | [[package]]
  | name = "errno"
  | 

--[ Match #151 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "doc-comment"
  | version = "0.3.3"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10"
  | 
  | [[package]]
  | name = "either"
  | 

--[ Match #152 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "digest"
  | version = "0.10.6"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "8168378f4e5023e7218c89c891c0fd8ecdb5e5e4f18cb78f38cf245dd021e76f"
  | dependencies = [
  |  "block-buffer",
  |  "crypto-common",
  | 

--[ Match #153 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "deflate"
  | version = "1.0.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "c86f7e25f518f4b81808a2cf1c50996a61f5c2eb394b2393bd87f2a4780a432f"
  | dependencies = [
  |  "adler32",
  | ]
  | 

--[ Match #154 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "datasize_derive"
  | version = "0.2.14"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "8b0415ec81945214410892a00d4b5dd4566f6263205184248e018a3fe384a61e"
  | dependencies = [
  |  "proc-macro2",
  |  "quote",
  | 

--[ Match #155 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "datasize"
  | version = "0.2.14"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "c88ad90721dc8e2ebe1430ac2f59c5bdcd74478baa68da26f30f33b0fe997f11"
  | dependencies = [
  |  "datasize_derive",
  | ]
  | 

--[ Match #156 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "crypto-common"
  | version = "0.1.6"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"
  | dependencies = [
  |  "generic-array",
  |  "typenum",
  | 

--[ Match #157 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "crossbeam-utils"
  | version = "0.8.15"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "3c063cd8cc95f5c377ed0d4b49a4b21f632396ff690e8470c29b3359b346984b"
  | dependencies = [
  |  "cfg-if",
  | ]
  | 

--[ Match #158 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "crossbeam-epoch"
  | version = "0.9.14"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "46bd5f3f85273295a9d14aedfb86f6aadbff6d8f5295c4a9edb08e819dcf5695"
  | dependencies = [
  |  "autocfg",
  |  "cfg-if",
  | 

--[ Match #159 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "crossbeam-deque"
  | version = "0.8.3"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "ce6fd6f855243022dcecf8702fef0c297d4338e226845fe067f6341ad9fa0cef"
  | dependencies = [
  |  "cfg-if",
  |  "crossbeam-epoch",
  | 

--[ Match #160 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "crossbeam-channel"
  | version = "0.5.8"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200"
  | dependencies = [
  |  "cfg-if",
  |  "crossbeam-utils",
  | 

--[ Match #161 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "cpufeatures"
  | version = "0.2.6"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "280a9f2d8b3a38871a3c8a46fb80db65e5e5ed97da80c4d08bf27fb63e35e181"
  | dependencies = [
  |  "libc",
  | ]
  | 

--[ Match #162 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "cipher"
  | version = "0.4.4"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad"
  | dependencies = [
  |  "crypto-common",
  |  "inout",
  | 

--[ Match #163 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "cfg-if"
  | version = "1.0.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
  | 
  | [[package]]
  | name = "cipher"
  | 

--[ Match #164 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "cc"
  | version = "1.0.79"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f"
  | 
  | [[package]]
  | name = "cfg-if"
  | 

--[ Match #165 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "cbc"
  | version = "0.1.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "26b52a9543ae338f279b96b0b9fed9c8093744685043739079ce85cd58f289a6"
  | dependencies = [
  |  "cipher",
  | ]
  | 

--[ Match #166 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "block-padding"
  | version = "0.3.3"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "a8894febbff9f758034a5b8e12d87918f56dfc64a8e1fe757d65e29041538d93"
  | dependencies = [
  |  "generic-array",
  | ]
  | 

--[ Match #167 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "block-buffer"
  | version = "0.10.4"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"
  | dependencies = [
  |  "generic-array",
  | ]
  | 

--[ Match #168 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "bitflags"
  | version = "1.3.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
  | 
  | [[package]]
  | name = "block-buffer"
  | 

--[ Match #169 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "autocfg"
  | version = "1.1.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"
  | 
  | [[package]]
  | name = "bitflags"
  | 

--[ Match #170 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "async-trait"
  | version = "0.1.68"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "b9ccdd8f2a161be9bd5c023df56f1b2a0bd1d83872ae53b71a84a12c9bf6e842"
  | dependencies = [
  |  "proc-macro2",
  |  "quote",
  | 

--[ Match #171 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "aes"
  | version = "0.8.2"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "433cfd6710c9986c576a25ca913c39d66a6474107b406f34f91d4a8923395241"
  | dependencies = [
  |  "cfg-if",
  |  "cipher",
  | 

--[ Match #172 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\Cargo.lock
   Pattern: ["'][a-z0-9]{40,}["']
  | name = "adler32"
  | version = "1.2.0"
  | source = "registry+https://github.com/rust-lang/crates.io-index"
  | checksum = "aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234"
  | 
  | [[package]]
  | name = "aes"
  | 

--[ Match #173 of 275 ]--
   Rule Id: BD000804
       Tag: Security.Backdoor.Obfuscation.LongStrings
  Severity: Moderate, Confidence: Medium
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\.cargo_vcs_info.json
   Pattern: ["'][a-z0-9]{40,}["']
  | {
  |   "git": {
  |     "sha1": "a6e2abc96b23b64aa1051966bb000aabf1275d9f"
  |   },
  |   "path_in_vcs": "pdf"
  | }

--[ Match #174 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \.(request|post|get)\(
  |                 writeln!(f, " MP")?;
  |             }
  |             EndMarkedContent => writeln!(f, "EMC")?,
  |             Close => match ops.get(1) {
  |                 Some(Stroke) => {
  |                     writeln!(f, "s")?;
  |                     advance += 1;
  | 

--[ Match #175 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \.(request|post|get)\(
  |     let height = dict.require("InlineImage", "Height")?.as_u32()?;
  |     let image_mask = dict.get("ImageMask").map(|p| p.as_bool()).transpose()?.unwrap_or(false);
  |     let intent = dict.remove("Intent").map(|p| RenderingIntent::from_primitive(p, &NoResolve)).trans
  |     let interpolate = dict.get("Interpolate").map(|p| p.as_bool()).transpose()?.unwrap_or(false);
  |     let width = dict.require("InlineImage", "Width")?.as_u32()?;
  | 
  |     let image_dict = ImageDict {
  | 

--[ Match #176 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \.(request|post|get)\(
  |     };
  |     
  |     let height = dict.require("InlineImage", "Height")?.as_u32()?;
  |     let image_mask = dict.get("ImageMask").map(|p| p.as_bool()).transpose()?.unwrap_or(false);
  |     let intent = dict.remove("Intent").map(|p| RenderingIntent::from_primitive(p, &NoResolve)).trans
  |     let interpolate = dict.get("Interpolate").map(|p| p.as_bool()).transpose()?.unwrap_or(false);
  |     let width = dict.require("InlineImage", "Width")?.as_u32()?;
  | 

--[ Match #177 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \.(request|post|get)\(
  |         ]
  |     ), resolve)).transpose()?;
  |     let decode = dict.get("Decode").map(|p| Object::from_primitive(p.clone(), resolve)).transpose()?
  |     let decode_parms = dict.get("DecodeParms").map(|p| p.clone().resolve(resolve)?.into_dictionary()
  |     let filter = dict.remove("Filter").map(|p| expand_abbr(p,
  |         &[
  |             ("AHx", "ASCIIHexDecode"),
  | 

--[ Match #178 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \.(request|post|get)\(
  |             ("I", "Indexed")
  |         ]
  |     ), resolve)).transpose()?;
  |     let decode = dict.get("Decode").map(|p| Object::from_primitive(p.clone(), resolve)).transpose()?
  |     let decode_parms = dict.get("DecodeParms").map(|p| p.clone().resolve(resolve)?.into_dictionary()
  |     let filter = dict.remove("Filter").map(|p| expand_abbr(p,
  |         &[
  | 

--[ Match #179 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \.(request|post|get)\(
  | 
  |     // ugh
  |     let bits_per_component = dict.get("BitsPerComponent").map(|p| p.as_integer()).transpose()?;
  |     let color_space = dict.get("ColorSpace").map(|p| ColorSpace::from_primitive(expand_abbr(p.clone(
  |         &[
  |             ("G", "DeviceGray"),
  |             ("RGB", "DeviceRGB"),
  | 

--[ Match #180 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \.(request|post|get)\(
  |     let data_end = lexer.get_pos() - 3;
  | 
  |     // ugh
  |     let bits_per_component = dict.get("BitsPerComponent").map(|p| p.as_integer()).transpose()?;
  |     let color_space = dict.get("ColorSpace").map(|p| ColorSpace::from_primitive(expand_abbr(p.clone(
  |         &[
  |             ("G", "DeviceGray"),
  | 

--[ Match #181 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |     Transform { matrix: Matrix },
  | 
  |     LineWidth { width: f32 },
  |     Dash { pattern: Vec<f32>, phase: f32 },
  |     LineJoin { join: LineJoin },
  |     LineCap { cap: LineCap },
  |     MiterLimit { limit: f32 },
  | 

--[ Match #182 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |             Restore => writeln!(f, "Q")?,
  |             Transform { matrix } => writeln!(f, "{} cm", matrix)?,
  |             LineWidth { width } => writeln!(f, "{} w", width)?,
  |             Dash { ref pattern, phase } => write!(f, "[{}] {} d", pattern.iter().format(" "), phase)
  |             LineJoin { join } => writeln!(f, "{} j", join as u8)?,
  |             LineCap { cap } => writeln!(f, "{} J", cap as u8)?,
  |             MiterLimit { limit } => writeln!(f, "{} M", limit)?,
  | 

--[ Match #183 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\content.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |     Ok(Rect { x, y, width, height })
  | }
  | fn rgb(args: &mut impl Iterator<Item=Primitive>) -> Result<Rgb> {
  |     let red = args.next().ok_or(PdfError::NoOpArg)?.as_number()?;
  |     let green = args.next().ok_or(PdfError::NoOpArg)?.as_number()?;
  |     let blue = args.next().ok_or(PdfError::NoOpArg)?.as_number()?;
  |     Ok(Rgb { red, green, blue })
  | 

--[ Match #184 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\crypt.rs
   Pattern: \.(request|post|get)\(
  |             4 | 5 | 6 => {
  |                 let default = dict
  |                     .crypt_filters
  |                     .get(try_opt!(dict.default_crypt_filter.as_ref()).as_str())
  |                     .ok_or_else(|| other!("missing crypt filter entry {:?}", dict.default_crypt_filt
  | 
  |                 match default.method {
  | 

--[ Match #185 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\enc.rs
   Pattern: \.(request|post|get)\(
  |     JPX_DECODER.get().ok_or_else(|| PdfError::Other { msg: "jp2k decoder not set".into()})?(data)
  | }
  | pub fn jbig2_decode(data: &[u8]) -> Result<Vec<u8>> {
  |     JBIG2_DECODER.get().ok_or_else(|| PdfError::Other { msg: "jbig2 decoder not set".into()})?(data)
  | }
  | 
  | pub fn decode(data: &[u8], filter: &StreamFilter) -> Result<Vec<u8>> {
  | 

--[ Match #186 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\enc.rs
   Pattern: \.(request|post|get)\(
  | }
  | 
  | pub fn jpx_decode(data: &[u8]) -> Result<Vec<u8>> {
  |     JPX_DECODER.get().ok_or_else(|| PdfError::Other { msg: "jp2k decoder not set".into()})?(data)
  | }
  | pub fn jbig2_decode(data: &[u8]) -> Result<Vec<u8>> {
  |     JBIG2_DECODER.get().ok_or_else(|| PdfError::Other { msg: "jbig2 decoder not set".into()})?(data)
  | 

--[ Match #187 of 275 ]--
   Rule Id: BD000600
       Tag: Security.Backdoor.LOLBAS.Windows
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\enc.rs
   Pattern: \s(advpack\.dll|appvlp|at|atbroker|bash|bginfo|bitsadmin|cdb|certutil|cl_invocation\.ps1|cl_mutexverifiers\.ps1|cmd|cmdkey|cmstp|comsvcs\.dll|control|csc|cscript|csi|devtoolslauncher|dfsvc|diskshadow|dnscmd|dnx|dotnet|dxcap|esentutl|eventvwr|excel|expand|extexport|extrac32|findstr|forfiles|ftp|gfxdownloadwrapper|gpscript|hh|ie4uinit|ieadvpack\.dll|ieaframe\.dll|ic|infdefaultinstall|installutil|jsc|makecab|manage-bde\.wsf|mavinject|mftrace|microsoft\.workflow\.compiler|mmc|msbuild|msconfig|msdeploy|msdt|mshta|mshtml\.dll|msc|msxsl|netsh|odbcconf|pcalua|pcwrun|pcwutl\.dll|pester\.bat|powerpnt|presentationhost|pubprn\.vbs|rcsi|reg|regasm|regedit|register-cimprovider|regsvcs|regsvr32|rpcping|rundll32|runonce|runscripthelper|sc|schtasks|scriptrunner|setupapi\.dll|shdocvw\.dll|shell32\.dll|slmgr\.vbs|sqldumper|sqlps|sqltoolsps|squirrel|syncappvpublishingserver|syncappvpublishingserver\.vbs|syssetup\.dll|te|tracker|tttracer|update|url\.dll|verclsid|vsjitdebugger|wab|winrm\.vbs|winword|wmic|wscript|wsl|wsreset|xwizard|zipfldr\.dll)\s
  | fn filter_paeth(a: u8, b: u8, c: u8) -> u8 {
  |     let ia = a as i16;
  |     let ib = b as i16;
  |     let ic = c as i16;
  | 
  |     let p = ia + ib - ic;
  | 
  | 

--[ Match #188 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\primitive.rs
   Pattern: \.(request|post|get)\(
  |                 let len = s.len();
  |                 if len > 2 && &s[0..2] == "D:" {
  | 
  |                     let year = match s.get(2..6) {
  |                         Some(year) => {
  |                             str::parse::<u16>(year)?
  |                         }
  | 

--[ Match #189 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\primitive.rs
   Pattern: \.(request|post|get)\(
  | }
  | 
  | fn parse_or<T: str::FromStr + Clone>(buffer: &str, range: Range<usize>, default: T) -> T {
  |     buffer.get(range)
  |         .map(|s| str::parse::<T>(s).unwrap_or_else(|_| default.clone()))
  |         .unwrap_or(default)
  | }
  | 

--[ Match #190 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\primitive.rs
   Pattern: \.(request|post|get)\(
  |     /// assert that the given key/value pair is in the dictionary (`required=true`),
  |     /// or the key is not present at all (`required=false`)
  |     pub fn expect(&self, typ: &'static str, key: &str, value: &str, required: bool) -> Result<()> {
  |         match self.dict.get(key) {
  |             Some(ty) => {
  |                 let ty = ty.as_name()?;
  |                 if ty != value {
  | 

--[ Match #191 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\primitive.rs
   Pattern: \.(request|post|get)\(
  |         self.len() == 0
  |     }
  |     pub fn get(&self, key: &str) -> Option<&Primitive> {
  |         self.dict.get(key)
  |     }
  |     pub fn insert(&mut self, key: impl Into<Name>, val: Primitive) -> Option<Primitive> {
  |         self.dict.insert(key.into(), val)
  | 

--[ Match #192 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\xref.rs
   Pattern: \.(request|post|get)\(
  |     }
  | 
  |     pub fn get(&self, id: ObjNr) -> Result<XRef> {
  |         match self.entries.get(id as usize) {
  |             Some(&entry) => Ok(entry),
  |             None => Err(PdfError::UnspecifiedXRefEntry {id}),
  |         }
  | 

--[ Match #193 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\stream.rs
   Pattern: \.(request|post|get)\(
  |             new_filters.push(StreamFilter::from_kind_and_params(filter, params, resolve)?);
  |         }
  |         for (i, filter) in file_filters.iter().enumerate() {
  |             let params = match file_decode_params.get(i) {
  |                 Some(params) => params.clone(),
  |                 None => Dictionary::default(),
  |             };
  | 

--[ Match #194 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\stream.rs
   Pattern: \.(request|post|get)\(
  |         let mut new_file_filters = Vec::new();
  | 
  |         for (i, filter) in filters.iter().enumerate() {
  |             let params = match decode_params.get(i) {
  |                 Some(params) => params.clone(),
  |                 None => Dictionary::default(),
  |             };
  | 

--[ Match #195 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\backend.rs
   Pattern: \.(request|post|get)\(
  |             }
  |             
  |             prev_trailer = {
  |                 match trailer.get("Prev") {
  |                     Some(p) => {
  |                         let prev = t!(p.as_usize());
  |                         Some(prev)
  | 

--[ Match #196 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\backend.rs
   Pattern: \.(request|post|get)\(
  |         }
  |         
  |         let mut prev_trailer = {
  |             match trailer.get("Prev") {
  |                 Some(p) => Some(t!(p.as_usize())),
  |                 None => None
  |             }
  | 

--[ Match #197 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\backend.rs
   Pattern: \.(request|post|get)\(
  |         
  |         let (xref_sections, trailer) = t!(read_xref_and_trailer_at(&mut lexer, resolve));
  |         
  |         let highest_id = t!(trailer.get("Size")
  |             .ok_or_else(|| PdfError::MissingEntry {field: "Size".into(), typ: "XRefTable"})?
  |             .as_u32());
  | 
  | 

--[ Match #198 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\mod.rs
   Pattern: \.(request|post|get)\(
  |             let dict = stream.info;
  | 
  |             assert_eq!(dict.len(), 2);
  |             assert!(dict.get("").unwrap().as_bool().unwrap());
  |         }
  |     }
  | 
  | 

--[ Match #199 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\mod.rs
   Pattern: \.(request|post|get)\(
  |             let dict = primitive.into_dictionary().unwrap();
  | 
  |             assert_eq!(dict.len(), 1);
  |             assert_eq!(dict.get("").unwrap().as_bool().unwrap(), true);
  |         }
  | 
  |         {
  | 

--[ Match #200 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\mod.rs
   Pattern: \.(request|post|get)\(
  |             assert_eq!(dict.len(), 2);
  |             let app_dict = dict.get("App").unwrap().clone().into_dictionary().unwrap();
  |             assert_eq!(app_dict.len(), 1);
  |             let name = app_dict.get("Name").unwrap().as_name().unwrap();
  |             assert_eq!(name, "");
  |         }
  |     }
  | 

--[ Match #201 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\mod.rs
   Pattern: \.(request|post|get)\(
  |             let dict = stream.info;
  | 
  |             assert_eq!(dict.len(), 2);
  |             let app_dict = dict.get("App").unwrap().clone().into_dictionary().unwrap();
  |             assert_eq!(app_dict.len(), 1);
  |             let name = app_dict.get("Name").unwrap().as_name().unwrap();
  |             assert_eq!(name, "");
  | 

--[ Match #202 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\mod.rs
   Pattern: \.(request|post|get)\(
  |             assert_eq!(dict.len(), 1);
  |             let app_dict = dict.get("App").unwrap().clone().into_dictionary().unwrap();
  |             assert_eq!(app_dict.len(), 1);
  |             let name = app_dict.get("Name").unwrap().as_name().unwrap();
  |             assert_eq!(name, "");
  |         }
  | 
  | 

--[ Match #203 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\mod.rs
   Pattern: \.(request|post|get)\(
  |             let dict = primitive.into_dictionary().unwrap();
  | 
  |             assert_eq!(dict.len(), 1);
  |             let app_dict = dict.get("App").unwrap().clone().into_dictionary().unwrap();
  |             assert_eq!(app_dict.len(), 1);
  |             let name = app_dict.get("Name").unwrap().as_name().unwrap();
  |             assert_eq!(name, "");
  | 

--[ Match #204 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\mod.rs
   Pattern: \.(request|post|get)\(
  |             while let Some(idx) = rest.iter().position(|&b| b == b'#') {
  |                 use crate::enc::decode_nibble;
  |                 use std::convert::TryInto;
  |                 let [hi, lo]: [u8; 2] = rest.get(idx+1 .. idx+3).ok_or(PdfError::EOF)?.try_into().un
  |                 let byte = match (decode_nibble(lo), decode_nibble(hi)) {
  |                     (Some(low), Some(high)) => low | high << 4,
  |                     _ => return Err(PdfError::HexDecode { pos: idx, bytes: [hi, lo] }),
  | 

--[ Match #205 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\mod.rs
   Pattern: \.(request|post|get)\(
  | fn parse_stream_object(dict: Dictionary, lexer: &mut Lexer, r: &impl Resolve, ctx: &Context) -> Resu
  |     t!(lexer.next_stream());
  | 
  |     let length = match dict.get("Length") {
  |         Some(&Primitive::Integer(n)) if n >= 0 => n as usize,
  |         Some(&Primitive::Reference(reference)) => t!(t!(r.resolve_flags(reference, ParseFlags::INTEG
  |         Some(other) => err!(PdfError::UnexpectedPrimitive { expected: "unsigned Integer or Reference
  |         None => err!(PdfError::MissingEntry { typ: "<Stream>", field: "Length".into() }),
  |     };
  | 
  |     let stream_substr = lexer.read_n(length);
  | 
  |     if stream_substr.len() != length {
  |         err!(PdfError::EOF)
  |     }
  | 
  |     // Finish
  |     t!(lexer.next_expect("endstream"));
  | 
  |     Ok(PdfStream {
  |        

--[ Match #206 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\tests\integration.rs
   Pattern: \.(request|post|get)\(
  |     use pdf::object::NoResolve;
  |     let file = run!(FileOptions::cached().open(file_path!("xelatex.pdf")));
  |     // .. we know that object 13 of that file is an ObjectStream
  |     let obj_stream: RcRef<ObjectStream> = run!(file.get(Ref::new(PlainRef {id: 13, gen: 0})));
  |     for i in 0..obj_stream.n_objects() {
  |         let (data, range) = run!(obj_stream.get_object_slice(i, &file));
  |         let slice = &data[range];
  | 

--[ Match #207 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\mod.rs
   Pattern: \.(request|post|get)\(
  | impl<T: Object+DataSize> Object for MaybeRef<T> {
  |     fn from_primitive(p: Primitive, resolve: &impl Resolve) -> Result<Self> {
  |         Ok(match p {
  |             Primitive::Reference(r) => MaybeRef::Indirect(resolve.get(Ref::new(r))?),
  |             p => MaybeRef::Direct(Shared::new(T::from_primitive(p, resolve)?))
  |         })
  |     }
  | 

--[ Match #208 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\mod.rs
   Pattern: \.(request|post|get)\(
  | impl<T: Object + std::fmt::Debug + DataSize> Object for RcRef<T> {
  |     fn from_primitive(p: Primitive, resolve: &impl Resolve) -> Result<Self> {
  |         match p {
  |             Primitive::Reference(r) => resolve.get(Ref::new(r)),
  |             p => Err(PdfError::UnexpectedPrimitive {expected: "Reference", found: p.get_debug_name()
  |         }
  |     }
  | 

--[ Match #209 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\function.rs
   Pattern: \.(request|post|get)\(
  |                     let mut add = |i0, i1, i2, f| {
  |                         let idx = (i0 + s0 * (i1 + s1 * i2)) * n_out;
  |                         
  |                         if let Some(part) = self.data.get(idx .. idx+n_out) {
  |                             for (o, &b) in out.iter_mut().zip(part) {
  |                                 *o += f * b as f32;
  |                             }
  | 

--[ Match #210 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\function.rs
   Pattern: \.(request|post|get)\(
  |                     let mut add = |i0, i1, f| {
  |                         let idx = (i0 + s0 * i1) * n_out;
  |                         
  |                         if let Some(part) = self.data.get(idx .. idx+n_out) {
  |                             for (o, &b) in out.iter_mut().zip(part) {
  |                                 *o += f * b as f32;
  |                             }
  | 

--[ Match #211 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\function.rs
   Pattern: \.(request|post|get)\(
  |                         raw.range.as_ref().and_then(|r| r.get(2*dim+1).cloned()).unwrap_or(INFINITY)
  |                     );
  |                     let c0 = f2.c0.as_ref().and_then(|c0| c0.get(dim).cloned()).unwrap_or(0.0);
  |                     let c1 = f2.c1.as_ref().and_then(|c1| c1.get(dim).cloned()).unwrap_or(1.0);
  |                     let exponent = f2.exponent;
  |                     parts.push(InterpolatedFunctionDim {
  |                         input_range, output_range, c0, c1, exponent
  | 

--[ Match #212 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\function.rs
   Pattern: \.(request|post|get)\(
  |                         raw.range.as_ref().and_then(|r| r.get(2*dim).cloned()).unwrap_or(-INFINITY),
  |                         raw.range.as_ref().and_then(|r| r.get(2*dim+1).cloned()).unwrap_or(INFINITY)
  |                     );
  |                     let c0 = f2.c0.as_ref().and_then(|c0| c0.get(dim).cloned()).unwrap_or(0.0);
  |                     let c1 = f2.c1.as_ref().and_then(|c1| c1.get(dim).cloned()).unwrap_or(1.0);
  |                     let exponent = f2.exponent;
  |                     parts.push(InterpolatedFunctionDim {
  | 

--[ Match #213 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\function.rs
   Pattern: \.(request|post|get)\(
  |                 for dim in 0 .. n_dim {
  |                     let output_range = (
  |                         raw.range.as_ref().and_then(|r| r.get(2*dim).cloned()).unwrap_or(-INFINITY),
  |                         raw.range.as_ref().and_then(|r| r.get(2*dim+1).cloned()).unwrap_or(INFINITY)
  |                     );
  |                     let c0 = f2.c0.as_ref().and_then(|c0| c0.get(dim).cloned()).unwrap_or(0.0);
  |                     let c1 = f2.c1.as_ref().and_then(|c1| c1.get(dim).cloned()).unwrap_or(1.0);
  | 

--[ Match #214 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\function.rs
   Pattern: \.(request|post|get)\(
  |                 let input_range = (raw.domain[0], raw.domain[1]);
  |                 for dim in 0 .. n_dim {
  |                     let output_range = (
  |                         raw.range.as_ref().and_then(|r| r.get(2*dim).cloned()).unwrap_or(-INFINITY),
  |                         raw.range.as_ref().and_then(|r| r.get(2*dim+1).cloned()).unwrap_or(INFINITY)
  |                     );
  |                     let c0 = f2.c0.as_ref().and_then(|c0| c0.get(dim).cloned()).unwrap_or(0.0);
  | 

--[ Match #215 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\names.rs
   Pattern: \.(request|post|get)\(
  | 
  |     if let Some(ref outlines) = catalog.outlines {
  |         if let Some(entry_ref) = outlines.first {
  |             let entry = file.get(entry_ref).unwrap();
  |             walk_outline(&file, entry, &get_page_nr, &page_nr, 0);
  |         }
  |     }
  | 

--[ Match #216 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\names.rs
   Pattern: \.(request|post|get)\(
  |     let mut pages = HashMap::new();
  |     fn add_tree(r: &impl Resolve, pages: &mut HashMap<PlainRef, usize>, tree: &PageTree, current_pag
  |         for &node_ref in &tree.kids {
  |             let node = r.get(node_ref).unwrap();
  |             match *node {
  |                 PagesNode::Tree(ref tree) => {
  |                     add_tree(r, pages, tree, current_page);
  | 

--[ Match #217 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\names.rs
   Pattern: \.(request|post|get)\(
  |             walk_outline(r, entry, name_map, page_map, depth + 1);
  |         }
  |         if let Some(entry_ref) = node.next {
  |             node = r.get(entry_ref).unwrap();
  |             continue;
  |         }
  | 
  | 

--[ Match #218 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\names.rs
   Pattern: \.(request|post|get)\(
  |             println!("{} -> {:?}", indent, a);
  |         }
  |         if let Some(entry_ref) = node.first {
  |             let entry = r.get(entry_ref).unwrap();
  |             walk_outline(r, entry, name_map, page_map, depth + 1);
  |         }
  |         if let Some(entry_ref) = node.next {
  | 

--[ Match #219 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\names.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |     let mut pages = HashMap::new();
  |     fn add_tree(r: &impl Resolve, pages: &mut HashMap<PlainRef, usize>, tree: &PageTree, current_pag
  |         for &node_ref in &tree.kids {
  |             let node = r.get(node_ref).unwrap();
  |             match *node {
  |                 PagesNode::Tree(ref tree) => {
  |                     add_tree(r, pages, tree, current_page);
  | 

--[ Match #220 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\names.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |             walk_outline(r, entry, name_map, page_map, depth + 1);
  |         }
  |         if let Some(entry_ref) = node.next {
  |             node = r.get(entry_ref).unwrap();
  |             continue;
  |         }
  | 
  | 

--[ Match #221 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\lexer\mod.rs
   Pattern: \.(request|post|get)\(
  | 
  |     #[inline]
  |     fn is_delimiter(&self, pos: usize) -> bool {
  |         self.buf.get(pos).map(|b| b"()<>[]{}/%".contains(b)).unwrap_or(false)
  |     }
  | 
  | }
  | 

--[ Match #222 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\lexer\mod.rs
   Pattern: \.(request|post|get)\(
  |     }
  |     #[inline]
  |     fn is_whitespace(&self, pos: usize) -> bool {
  |         self.buf.get(pos).map(|&b| is_whitespace(b)).unwrap_or(false)
  |     }
  | 
  |     #[inline]
  | 

--[ Match #223 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\lexer\mod.rs
   Pattern: \.(request|post|get)\(
  |                 return Ok((self.new_substr(start_pos..pos), pos));
  |             }
  | 
  |             if let Some(slice) = self.buf.get(pos..=pos+1) {
  |                 if slice == b"<<" || slice == b">>" {
  |                     pos = self.advance_pos(pos)?;
  |                 }
  | 

--[ Match #224 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\lexer\mod.rs
   Pattern: \.(request|post|get)\(
  |             return Err(PdfError::EOF);
  |         }
  |         let mut pos = self.skip_whitespace(self.pos)?;
  |         while self.buf.get(pos) == Some(&b'%') {
  |             pos += 1;
  |             if let Some(off) = self.buf[pos..].iter().position(|&b| b == b'\n') {
  |                 pos += off+1;
  | 

--[ Match #225 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\lexer\mod.rs
   Pattern: \.(request|post|get)\(
  |         if b0 == b'\n' {
  |             self.pos = pos + 7;
  |         } else if b0 == b'\r' {
  |             let &b1 = self.buf.get(pos + 7).ok_or(PdfError::EOF)?;
  |             if b1 != b'\n' {
  |                 bail!("invalid whitespace following 'stream'");
  |                 // bail!("invalid whitespace following 'stream'");
  | 

--[ Match #226 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\parser\lexer\mod.rs
   Pattern: \.(request|post|get)\(
  |             // bail!("next token isn't 'stream'");
  |         }
  |         
  |         let &b0 = self.buf.get(pos + 6).ok_or(PdfError::EOF)?;
  |         if b0 == b'\n' {
  |             self.pos = pos + 7;
  |         } else if b0 == b'\r' {
  | 

--[ Match #227 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\color.rs
   Pattern: \.(request|post|get)\(
  |                 let names = t!(Object::from_primitive(t!(get_index(&arr, 1)).clone(), resolve));
  |                 let alt = t!(Object::from_primitive(t!(get_index(&arr, 2)).clone(), resolve));
  |                 let tint = t!(Function::from_primitive(t!(get_index(&arr, 3)).clone(), resolve));
  |                 let attr = arr.get(4).map(|p| Dictionary::from_primitive(p.clone(), resolve)).transp
  | 
  |                 Ok(ColorSpace::DeviceN { names, alt, tint, attr})
  |             }
  | 

--[ Match #228 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\color.rs
   Pattern: \.(request|post|get)\(
  | }
  | 
  | fn get_index(arr: &[Primitive], idx: usize) -> Result<&Primitive> {
  |      arr.get(idx).ok_or(PdfError::Bounds { index: idx, len: arr.len() })
  | }
  | 
  | impl Object for ColorSpace {
  | 

--[ Match #229 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\read.rs
   Pattern: \.(request|post|get)\(
  |             };
  |             fonts.insert(name, font.clone());
  |         }
  |         images.extend(resources.xobjects.iter().map(|(_name, &r)| file.get(r).unwrap())
  |             .filter(|o| matches!(**o, XObject::Image(_)))
  |         );
  |     }
  | 

--[ Match #230 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\read.rs
   Pattern: \.(request|post|get)\(
  |     let file = FileOptions::cached().open(&path).unwrap();
  |     if let Some(ref info) = file.trailer.info_dict {
  |         let title = info.get("Title").and_then(|p| p.to_string_lossy().ok());
  |         let author = info.get("Author").and_then(|p| p.to_string_lossy().ok());
  | 
  |         let descr = match (title, author) {
  |             (Some(title), None) => title,
  | 

--[ Match #231 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\read.rs
   Pattern: \.(request|post|get)\(
  | 
  |     let file = FileOptions::cached().open(&path).unwrap();
  |     if let Some(ref info) = file.trailer.info_dict {
  |         let title = info.get("Title").and_then(|p| p.to_string_lossy().ok());
  |         let author = info.get("Author").and_then(|p| p.to_string_lossy().ok());
  | 
  |         let descr = match (title, author) {
  | 

--[ Match #232 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\font.rs
   Pattern: \.(request|post|get)\(
  |         ToUnicodeMap { inner: iter.collect() }
  |     }
  |     pub fn get(&self, gid: u16) -> Option<&str> {
  |         self.inner.get(&gid).map(|s| s.as_str())
  |     }
  |     pub fn insert(&mut self, gid: u16, unicode: SmallString) {
  |         self.inner.insert(gid, unicode);
  | 

--[ Match #233 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\font.rs
   Pattern: \.(request|post|get)\(
  |     }
  |     pub fn cid_to_gid_map(&self) -> Option<&CidToGidMap> {
  |         match self.data {
  |             FontData::Type0(ref inner) => inner.descendant_fonts.get(0).and_then(|f| f.cid_to_gid_ma
  |             FontData::CIDFontType0(ref f) | FontData::CIDFontType2(ref f) => f.cid_to_gid_map.as_ref
  |             _ => None
  |         }
  | 

--[ Match #234 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\font.rs
   Pattern: \.(request|post|get)\(
  | impl Font {
  |     pub fn embedded_data(&self, resolve: &impl Resolve) -> Option<Result<Arc<[u8]>>> {
  |         match self.data {
  |             FontData::Type0(ref t) => t.descendant_fonts.get(0).and_then(|f| f.embedded_data(resolve
  |             FontData::CIDFontType0(ref c) | FontData::CIDFontType2(ref c) => c.font_descriptor.data(
  |             FontData::Type1(ref t) | FontData::TrueType(ref t) => t.font_descriptor.as_ref().and_the
  |             _ => None
  | 

--[ Match #235 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\font.rs
   Pattern: \.(request|post|get)\(
  |     #[allow(clippy::float_cmp)]  // TODO
  |     fn set(&mut self, cid: usize, width: f32) {
  |         self._set(cid, width);
  |         debug_assert_eq!(self.get(cid), width);
  |     }
  |     fn _set(&mut self, cid: usize, width: f32) {
  |         use std::iter::repeat;
  | 

--[ Match #236 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\font.rs
   Pattern: \.(request|post|get)\(
  |         if cid < self.first_char {
  |             self.default
  |         } else {
  |             self.values.get(cid - self.first_char).cloned().unwrap_or(self.default)
  |         }
  |     }
  |     fn new(default: f32) -> Widths {
  | 

--[ Match #237 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\font.rs
   Pattern: \.(request|post|get)\(
  | 
  |         // BaseFont is required for all FontTypes except Type3
  |         dict.expect("Font", "Type", "Font", true)?;
  |         let base_font_primitive = dict.get("BaseFont");
  |         let base_font = match (base_font_primitive, subtype) {
  |             (Some(name), _) => Some(t!(t!(name.clone().resolve(resolve)).into_name(), name)),
  |             (None, FontType::Type3) => None,
  | 

--[ Match #238 of 275 ]--
   Rule Id: BD000600
       Tag: Security.Backdoor.LOLBAS.Windows
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\README.md
   Pattern: \s(advpack\.dll|appvlp|at|atbroker|bash|bginfo|bitsadmin|cdb|certutil|cl_invocation\.ps1|cl_mutexverifiers\.ps1|cmd|cmdkey|cmstp|comsvcs\.dll|control|csc|cscript|csi|devtoolslauncher|dfsvc|diskshadow|dnscmd|dnx|dotnet|dxcap|esentutl|eventvwr|excel|expand|extexport|extrac32|findstr|forfiles|ftp|gfxdownloadwrapper|gpscript|hh|ie4uinit|ieadvpack\.dll|ieaframe\.dll|ic|infdefaultinstall|installutil|jsc|makecab|manage-bde\.wsf|mavinject|mftrace|microsoft\.workflow\.compiler|mmc|msbuild|msconfig|msdeploy|msdt|mshta|mshtml\.dll|msc|msxsl|netsh|odbcconf|pcalua|pcwrun|pcwutl\.dll|pester\.bat|powerpnt|presentationhost|pubprn\.vbs|rcsi|reg|regasm|regedit|register-cimprovider|regsvcs|regsvr32|rpcping|rundll32|runonce|runscripthelper|sc|schtasks|scriptrunner|setupapi\.dll|shdocvw\.dll|shell32\.dll|slmgr\.vbs|sqldumper|sqlps|sqltoolsps|squirrel|syncappvpublishingserver|syncappvpublishingserver\.vbs|syssetup\.dll|te|tracker|tttracer|update|url\.dll|verclsid|vsjitdebugger|wab|winrm\.vbs|winword|wmic|wscript|wsl|wsreset|xwizard|zipfldr\.dll)\s
  | A library for rendering PDFs via [Pathfinder](https://github.com/servo/pathfinder) and minimal viewe
  | 
  | # Inspect
  | There is a tool for visualizing a PDF file as an interactive hierarchy of primitives at [inspect-pri
  | 

--[ Match #239 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: \.(request|post|get)\(
  |         self.storage.resolve_flags(r, flags, depth)
  |     }
  |     fn get<T: Object+DataSize>(&self, r: Ref<T>) -> Result<RcRef<T>> {
  |         self.storage.get(r)
  |     }
  |     fn options(&self) -> &ParseOptions {
  |         self.storage.options()
  | 

--[ Match #240 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: \.(request|post|get)\(
  |         Ok(RcRef::new(r, rc))
  |     }
  |     fn update<T: ObjectWrite>(&mut self, old: PlainRef, obj: T) -> Result<RcRef<T>> {
  |         let r = match self.refs.get(old.id)? {
  |             XRef::Free { .. } => panic!(),
  |             XRef::Raw { gen_nr, .. } => PlainRef { id: old.id, gen: gen_nr + 1 },
  |             XRef::Stream { .. } => return self.create(obj),
  | 

--[ Match #241 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: \.(request|post|get)\(
  |     fn resolve_flags(&self, r: PlainRef, flags: ParseFlags, depth: usize) -> Result<Primitive> {
  |         match self.changes.get(&r.id) {
  |             Some(p) => Ok((*p).clone()),
  |             None => match t!(self.refs.get(r.id)) {
  |                 XRef::Raw {pos, ..} => {
  |                     let mut lexer = Lexer::with_offset(t!(self.backend.read(self.start_offset + pos 
  |                     let p = t!(parse_indirect_object(&mut lexer, self, self.decoder.as_ref(), flags)
  | 

--[ Match #242 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: \.(request|post|get)\(
  |     SC: Cache<Result<Arc<[u8]>, Arc<PdfError>>>,
  | {
  |     fn resolve_flags(&self, r: PlainRef, flags: ParseFlags, depth: usize) -> Result<Primitive> {
  |         match self.changes.get(&r.id) {
  |             Some(p) => Ok((*p).clone()),
  |             None => match t!(self.refs.get(r.id)) {
  |                 XRef::Raw {pos, ..} => {
  | 

--[ Match #243 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: \.(request|post|get)\(
  |             }
  |             if let Some(Primitive::Reference(catalog_ref)) = trailer.get("Root") {
  |                 let catalog = t!(t!(self.resolve(*catalog_ref)).resolve(self)?.into_dictionary());
  |                 if let Some(Primitive::Reference(metadata_ref)) = catalog.get("Metadata") {
  |                     self.decoder.as_mut().unwrap().metadata_indirect_object = Some(*metadata_ref);
  |                 }
  |             }
  | 

--[ Match #244 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: \.(request|post|get)\(
  |             if let Primitive::Reference(reference) = crypt {
  |                 self.decoder.as_mut().unwrap().encrypt_indirect_object = Some(*reference);
  |             }
  |             if let Some(Primitive::Reference(catalog_ref)) = trailer.get("Root") {
  |                 let catalog = t!(t!(self.resolve(*catalog_ref)).resolve(self)?.into_dictionary());
  |                 if let Some(Primitive::Reference(metadata_ref)) = catalog.get("Metadata") {
  |                     self.decoder.as_mut().unwrap().metadata_indirect_object = Some(*metadata_ref);
  | 

--[ Match #245 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: \.(request|post|get)\(
  | 
  |         if let Some(crypt) = trailer.get("Encrypt") {
  |             let key = trailer
  |                 .get("ID")
  |                 .ok_or(PdfError::MissingEntry {
  |                     typ: "Trailer",
  |                     field: "ID".into(),
  | 

--[ Match #246 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: \.(request|post|get)\(
  |         let (refs, trailer) = t!(self.backend.read_xref_table_and_trailer(self.start_offset, self));
  |         self.refs = refs;
  | 
  |         if let Some(crypt) = trailer.get("Encrypt") {
  |             let key = trailer
  |                 .get("ID")
  |                 .ok_or(PdfError::MissingEntry {
  | 

--[ Match #247 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\file.rs
   Pattern: \.(request|post|get)\(
  | #[cfg(feature="cache")]
  | impl<T: Clone + ValueSize + Send + 'static> Cache<T> for Arc<SyncCache<PlainRef, T>> {
  |     fn get_or_compute(&self, key: PlainRef, compute: impl FnOnce() -> T) -> T {
  |         self.get(key, compute)
  |     }
  | }
  | 
  | 

--[ Match #248 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  | impl Object for Action {
  |     fn from_primitive(p: Primitive, resolve: &impl Resolve) -> Result<Self> {
  |         let mut d = t!(p.resolve(resolve)?.into_dictionary());
  |         let s = try_opt!(d.get("S")).as_name()?;
  |         match s {
  |             "GoTo" => {
  |                 let dest = t!(MaybeNamedDest::from_primitive(try_opt!(d.remove("D")), resolve));
  | 

--[ Match #249 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |             }),
  |             "FitB" => DestView::FitB,
  |             "FitBH" => DestView::FitBH {
  |                 top: try_opt!(array.get(2)).as_number()?
  |             },
  |             name => return Err(PdfError::UnknownVariant { id: "Dest", name: name.into() })
  |         };
  | 

--[ Match #250 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |                 left:   try_opt!(array.get(2)).as_number()?,
  |                 bottom: try_opt!(array.get(3)).as_number()?,
  |                 right:  try_opt!(array.get(4)).as_number()?,
  |                 top:    try_opt!(array.get(5)).as_number()?,
  |             }),
  |             "FitB" => DestView::FitB,
  |             "FitBH" => DestView::FitBH {
  | 

--[ Match #251 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |             "FitR" => DestView::FitR(Rect {
  |                 left:   try_opt!(array.get(2)).as_number()?,
  |                 bottom: try_opt!(array.get(3)).as_number()?,
  |                 right:  try_opt!(array.get(4)).as_number()?,
  |                 top:    try_opt!(array.get(5)).as_number()?,
  |             }),
  |             "FitB" => DestView::FitB,
  | 

--[ Match #252 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |             },
  |             "FitR" => DestView::FitR(Rect {
  |                 left:   try_opt!(array.get(2)).as_number()?,
  |                 bottom: try_opt!(array.get(3)).as_number()?,
  |                 right:  try_opt!(array.get(4)).as_number()?,
  |                 top:    try_opt!(array.get(5)).as_number()?,
  |             }),
  | 

--[ Match #253 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |                 left: try_opt!(array.get(2)).as_number()?
  |             },
  |             "FitR" => DestView::FitR(Rect {
  |                 left:   try_opt!(array.get(2)).as_number()?,
  |                 bottom: try_opt!(array.get(3)).as_number()?,
  |                 right:  try_opt!(array.get(4)).as_number()?,
  |                 top:    try_opt!(array.get(5)).as_number()?,
  | 

--[ Match #254 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |                 top: try_opt!(array.get(2)).as_number()?
  |             },
  |             "FitV" => DestView::FitV {
  |                 left: try_opt!(array.get(2)).as_number()?
  |             },
  |             "FitR" => DestView::FitR(Rect {
  |                 left:   try_opt!(array.get(2)).as_number()?,
  | 

--[ Match #255 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |             },
  |             "Fit" => DestView::Fit,
  |             "FitH" => DestView::FitH {
  |                 top: try_opt!(array.get(2)).as_number()?
  |             },
  |             "FitV" => DestView::FitV {
  |                 left: try_opt!(array.get(2)).as_number()?
  | 

--[ Match #256 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |                     Primitive::Number(f) => Some(f),
  |                     ref p => return Err(PdfError::UnexpectedPrimitive { expected: "Number | Integer 
  |                 },
  |                 zoom: match array.get(4) {
  |                     Some(Primitive::Null) => 0.0,
  |                     Some(&Primitive::Integer(n)) => n as f32,
  |                     Some(&Primitive::Number(f)) => f,
  | 

--[ Match #257 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |                     Primitive::Number(f) => Some(f),
  |                     ref p => return Err(PdfError::UnexpectedPrimitive { expected: "Number | Integer 
  |                 },
  |                 top: match *try_opt!(array.get(3)) {
  |                     Primitive::Null => None,
  |                     Primitive::Integer(n) => Some(n as f32),
  |                     Primitive::Number(f) => Some(f),
  | 

--[ Match #258 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |         let kind = try_opt!(array.get(1));
  |         let view = match kind.as_name()? {
  |             "XYZ" => DestView::XYZ {
  |                 left: match *try_opt!(array.get(2)) {
  |                     Primitive::Null => None,
  |                     Primitive::Integer(n) => Some(n as f32),
  |                     Primitive::Number(f) => Some(f),
  | 

--[ Match #259 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  | impl Dest {
  |     fn from_array(array: &[Primitive], resolve: &impl Resolve) -> Result<Self> {
  |         let page = Object::from_primitive(try_opt!(array.get(0)).clone(), resolve)?;
  |         let kind = try_opt!(array.get(1));
  |         let view = match kind.as_name()? {
  |             "XYZ" => DestView::XYZ {
  |                 left: match *try_opt!(array.get(2)) {
  | 

--[ Match #260 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  | }
  | impl Dest {
  |     fn from_array(array: &[Primitive], resolve: &impl Resolve) -> Result<Self> {
  |         let page = Object::from_primitive(try_opt!(array.get(0)).clone(), resolve)?;
  |         let kind = try_opt!(array.get(1));
  |         let view = match kind.as_name()? {
  |             "XYZ" => DestView::XYZ {
  | 

--[ Match #261 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |             }
  |             NameTreeNode::Intermediate(ref items) => {
  |                 for &tree_ref in items {
  |                     let tree = r.get(tree_ref)?;
  |                     tree.walk(r, callback)?;
  |                 }
  |             }
  | 

--[ Match #262 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |     }
  |     pub fn pages<'a>(&'a self, resolve: &'a impl Resolve) -> impl Iterator<Item=Result<PageRc>> + 'a
  |         self.kids.iter().flat_map(move |&r| {
  |             match resolve.get(r) {
  |                 Ok(node) => Either::Left(node.pages(resolve)),
  |                 Err(e) => Either::Right(once(Err(e)))
  |             }
  | 

--[ Match #263 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |     pub fn update_pages(&mut self, mut offset: u32, page_nr: u32, page: Page) -> Result<()> {
  |         for kid in &self.kids {
  |             // println!("{}/{} {:?}", offset, page_nr, kid);
  |             match *(self.get(*kid)?) {
  |                 PagesNode::Tree(ref mut t) => {
  |                     if offset + t.count < page_nr {
  |                         offset += t.count;
  | 

--[ Match #264 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \.(request|post|get)\(
  |         }
  |         let mut pos = 0;
  |         for &kid in &self.kids {
  |             let node = resolve.get(kid)?;
  |             match *node {
  |                 PagesNode::Tree(ref tree) => {
  |                     if (pos .. pos + tree.count).contains(&page_nr) {
  | 

--[ Match #265 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |             DestView::FitB => {
  |                 arr.push(Primitive::Name("FitB".into()));
  |             }
  |             DestView::FitBH { top } => {
  |                 arr.push(Primitive::Name("FitBH".into()));
  |                 arr.push(Primitive::Number(top));
  |             }
  | 

--[ Match #266 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |             DestView::Fit => {
  |                 arr.push(Primitive::Name("Fit".into()));
  |             }
  |             DestView::FitH { top } => {
  |                 arr.push(Primitive::Name("FitH".into()));
  |                 arr.push(Primitive::Number(top));
  |             }
  | 

--[ Match #267 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |         }
  |         let mut pos = 0;
  |         for &kid in &self.kids {
  |             let node = resolve.get(kid)?;
  |             match *node {
  |                 PagesNode::Tree(ref tree) => {
  |                     if (pos .. pos + tree.count).contains(&page_nr) {
  | 

--[ Match #268 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\object\types.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  | }
  | impl Object for PagesRc {
  |     fn from_primitive(p: Primitive, resolve: &impl Resolve) -> Result<PagesRc> {
  |         let node = t!(RcRef::from_primitive(p, resolve));
  |         match *node {
  |             PagesNode::Leaf(_) => Err(PdfError::WrongDictionaryType {expected: "Pages".into(), found
  |             PagesNode::Tree(_) => Ok(PagesRc(node))
  | 

--[ Match #269 of 275 ]--
   Rule Id: BD000600
       Tag: Security.Backdoor.LOLBAS.Windows
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\error.rs
   Pattern: \s(advpack\.dll|appvlp|at|atbroker|bash|bginfo|bitsadmin|cdb|certutil|cl_invocation\.ps1|cl_mutexverifiers\.ps1|cmd|cmdkey|cmstp|comsvcs\.dll|control|csc|cscript|csi|devtoolslauncher|dfsvc|diskshadow|dnscmd|dnx|dotnet|dxcap|esentutl|eventvwr|excel|expand|extexport|extrac32|findstr|forfiles|ftp|gfxdownloadwrapper|gpscript|hh|ie4uinit|ieadvpack\.dll|ieaframe\.dll|ic|infdefaultinstall|installutil|jsc|makecab|manage-bde\.wsf|mavinject|mftrace|microsoft\.workflow\.compiler|mmc|msbuild|msconfig|msdeploy|msdt|mshta|mshtml\.dll|msc|msxsl|netsh|odbcconf|pcalua|pcwrun|pcwutl\.dll|pester\.bat|powerpnt|presentationhost|pubprn\.vbs|rcsi|reg|regasm|regedit|register-cimprovider|regsvcs|regsvr32|rpcping|rundll32|runonce|runscripthelper|sc|schtasks|scriptrunner|setupapi\.dll|shdocvw\.dll|shell32\.dll|slmgr\.vbs|sqldumper|sqlps|sqltoolsps|squirrel|syncappvpublishingserver|syncappvpublishingserver\.vbs|syssetup\.dll|te|tracker|tttracer|update|url\.dll|verclsid|vsjitdebugger|wab|winrm\.vbs|winword|wmic|wscript|wsl|wsreset|xwizard|zipfldr\.dll)\s
  |     #[snafu(display("NoneError at {}:{}:{}:{}", file, line, column, context))]
  |     NoneError { file: &'static str, line: u32, column: u32, context: Context },
  | 
  |     #[snafu(display("Try at {}:{}:{}:{}", file, line, column, context))]
  |     Try { file: &'static str, line: u32, column: u32, context: Context, source: Box<PdfError> },
  | 
  |     #[snafu(display("PostScriptParseError"))]
  | 

--[ Match #270 of 275 ]--
   Rule Id: BD000600
       Tag: Security.Backdoor.LOLBAS.Windows
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\error.rs
   Pattern: \s(advpack\.dll|appvlp|at|atbroker|bash|bginfo|bitsadmin|cdb|certutil|cl_invocation\.ps1|cl_mutexverifiers\.ps1|cmd|cmdkey|cmstp|comsvcs\.dll|control|csc|cscript|csi|devtoolslauncher|dfsvc|diskshadow|dnscmd|dnx|dotnet|dxcap|esentutl|eventvwr|excel|expand|extexport|extrac32|findstr|forfiles|ftp|gfxdownloadwrapper|gpscript|hh|ie4uinit|ieadvpack\.dll|ieaframe\.dll|ic|infdefaultinstall|installutil|jsc|makecab|manage-bde\.wsf|mavinject|mftrace|microsoft\.workflow\.compiler|mmc|msbuild|msconfig|msdeploy|msdt|mshta|mshtml\.dll|msc|msxsl|netsh|odbcconf|pcalua|pcwrun|pcwutl\.dll|pester\.bat|powerpnt|presentationhost|pubprn\.vbs|rcsi|reg|regasm|regedit|register-cimprovider|regsvcs|regsvr32|rpcping|rundll32|runonce|runscripthelper|sc|schtasks|scriptrunner|setupapi\.dll|shdocvw\.dll|shell32\.dll|slmgr\.vbs|sqldumper|sqlps|sqltoolsps|squirrel|syncappvpublishingserver|syncappvpublishingserver\.vbs|syssetup\.dll|te|tracker|tttracer|update|url\.dll|verclsid|vsjitdebugger|wab|winrm\.vbs|winword|wmic|wscript|wsl|wsreset|xwizard|zipfldr\.dll)\s
  |     #[snafu(display("{}", msg))]
  |     Other { msg: String },
  | 
  |     #[snafu(display("NoneError at {}:{}:{}:{}", file, line, column, context))]
  |     NoneError { file: &'static str, line: u32, column: u32, context: Context },
  | 
  |     #[snafu(display("Try at {}:{}:{}:{}", file, line, column, context))]
  | 

--[ Match #271 of 275 ]--
   Rule Id: BD000600
       Tag: Security.Backdoor.LOLBAS.Windows
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\error.rs
   Pattern: \s(advpack\.dll|appvlp|at|atbroker|bash|bginfo|bitsadmin|cdb|certutil|cl_invocation\.ps1|cl_mutexverifiers\.ps1|cmd|cmdkey|cmstp|comsvcs\.dll|control|csc|cscript|csi|devtoolslauncher|dfsvc|diskshadow|dnscmd|dnx|dotnet|dxcap|esentutl|eventvwr|excel|expand|extexport|extrac32|findstr|forfiles|ftp|gfxdownloadwrapper|gpscript|hh|ie4uinit|ieadvpack\.dll|ieaframe\.dll|ic|infdefaultinstall|installutil|jsc|makecab|manage-bde\.wsf|mavinject|mftrace|microsoft\.workflow\.compiler|mmc|msbuild|msconfig|msdeploy|msdt|mshta|mshtml\.dll|msc|msxsl|netsh|odbcconf|pcalua|pcwrun|pcwutl\.dll|pester\.bat|powerpnt|presentationhost|pubprn\.vbs|rcsi|reg|regasm|regedit|register-cimprovider|regsvcs|regsvr32|rpcping|rundll32|runonce|runscripthelper|sc|schtasks|scriptrunner|setupapi\.dll|shdocvw\.dll|shell32\.dll|slmgr\.vbs|sqldumper|sqlps|sqltoolsps|squirrel|syncappvpublishingserver|syncappvpublishingserver\.vbs|syssetup\.dll|te|tracker|tttracer|update|url\.dll|verclsid|vsjitdebugger|wab|winrm\.vbs|winword|wmic|wscript|wsl|wsreset|xwizard|zipfldr\.dll)\s
  |     #[snafu(display("Unexpected token '{}' at {} - expected '{}'", lexeme, pos, expected))]
  |     UnexpectedLexeme {pos: usize, lexeme: String, expected: &'static str},
  | 
  |     #[snafu(display("Expecting an object, encountered {} at pos {}. Rest:\n{}\n\n((end rest))", firs
  |     UnknownType {pos: usize, first_lexeme: String, rest: String},
  | 
  |     #[snafu(display("Unknown variant '{}' for enum {}", name, id))]
  | 

--[ Match #272 of 275 ]--
   Rule Id: BD000600
       Tag: Security.Backdoor.LOLBAS.Windows
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\error.rs
   Pattern: \s(advpack\.dll|appvlp|at|atbroker|bash|bginfo|bitsadmin|cdb|certutil|cl_invocation\.ps1|cl_mutexverifiers\.ps1|cmd|cmdkey|cmstp|comsvcs\.dll|control|csc|cscript|csi|devtoolslauncher|dfsvc|diskshadow|dnscmd|dnx|dotnet|dxcap|esentutl|eventvwr|excel|expand|extexport|extrac32|findstr|forfiles|ftp|gfxdownloadwrapper|gpscript|hh|ie4uinit|ieadvpack\.dll|ieaframe\.dll|ic|infdefaultinstall|installutil|jsc|makecab|manage-bde\.wsf|mavinject|mftrace|microsoft\.workflow\.compiler|mmc|msbuild|msconfig|msdeploy|msdt|mshta|mshtml\.dll|msc|msxsl|netsh|odbcconf|pcalua|pcwrun|pcwutl\.dll|pester\.bat|powerpnt|presentationhost|pubprn\.vbs|rcsi|reg|regasm|regedit|register-cimprovider|regsvcs|regsvr32|rpcping|rundll32|runonce|runscripthelper|sc|schtasks|scriptrunner|setupapi\.dll|shdocvw\.dll|shell32\.dll|slmgr\.vbs|sqldumper|sqlps|sqltoolsps|squirrel|syncappvpublishingserver|syncappvpublishingserver\.vbs|syssetup\.dll|te|tracker|tttracer|update|url\.dll|verclsid|vsjitdebugger|wab|winrm\.vbs|winword|wmic|wscript|wsl|wsreset|xwizard|zipfldr\.dll)\s
  |     #[snafu(display("Out of bounds: index {}, but len is {}", index, len))]
  |     Bounds { index: usize, len: usize },
  | 
  |     #[snafu(display("Unexpected token '{}' at {} - expected '{}'", lexeme, pos, expected))]
  |     UnexpectedLexeme {pos: usize, lexeme: String, expected: &'static str},
  | 
  |     #[snafu(display("Expecting an object, encountered {} at pos {}. Rest:\n{}\n\n((end rest))", firs
  | 

--[ Match #273 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\error.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |         field: String
  |     },
  | 
  |     #[snafu(display("Expected to find value {} for key {}. Found {} instead.", value, key, found))]
  |     KeyValueMismatch {
  |         key: String,
  |         value: String,
  | 

--[ Match #274 of 275 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\src\error.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  |     #[snafu(display("Hex decode error. Position {}, bytes {:?}", pos, bytes))]
  |     HexDecode {pos: usize, bytes: [u8; 2]},
  | 
  |     #[snafu(display("Ascii85 tail error"))]
  |     Ascii85TailError,
  | 
  |     #[snafu(display("Failed to convert '{}' into PredictorType", n))]
  | 

--[ Match #275 of 275 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-pdf@0.8\pdf-0.8.1\examples\metadata.rs
   Pattern: \.(request|post|get)\(
  |         println!("{:?}", field);
  |     }
  |     for &kid in field.kids.iter() {
  |         let child = resolve.get(kid).unwrap();
  |         print_field(&child, resolve);
  |     }
  | }

275 matches found.
