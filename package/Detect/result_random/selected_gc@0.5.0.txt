--[ Match #27 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |     /// assert!(c.try_borrow_mut().is_ok());
  |     /// ```
  |     pub fn try_borrow_mut(&self) -> Result<GcCellRefMut<'_, T>, BorrowMutError> {
  |         if self.flags.get().borrowed() != BorrowState::Unused {
  |             return Err(BorrowMutError);
  |         }
  |         self.flags.set(self.flags.get().set_writing());
  | 

--[ Match #34 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |     }
  | 
  |     unsafe fn clear_root(&self) {
  |         self.ptr_root.set(clear_root_bit(self.ptr_root.get()));
  |     }
  | 
  |     #[inline]
  | 

--[ Match #5 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |         debug_assert!(self.gc_cell.flags.get().borrowed() == BorrowState::Writing);
  |         // Restore the rooted state of the GcCell's contents to the state of the GcCell.
  |         // During the lifetime of the GcCellRefMut, the GcCell's contents are rooted.
  |         if !self.gc_cell.flags.get().rooted() {
  |             unsafe {
  |                 (*self.gc_cell.cell.get()).unroot();
  |             }
  | 

--[ Match #23 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  | 
  |             Ok(GcCellRefMut {
  |                 gc_cell: self,
  |                 value: &mut *self.cell.get(),
  |             })
  |         }
  |     }
  | 

--[ Match #60 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  | 
  |         // It should be traced by the GC
  |         force_collect();
  |         FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  | 
  |         {
  |             // Borrow it
  | 

--[ Match #79 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |         {
  |             *node1.cycle.borrow_mut() = Some(node2);
  | 
  |             FLAGS1.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  |             FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  | 
  |             force_collect();
  | 

--[ Match #12 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |     #[inline]
  |     fn finalize_glue(&self) {
  |         Finalize::finalize(self);
  |         match self.flags.get().borrowed() {
  |             BorrowState::Writing => (),
  |             _ => unsafe { (*self.cell.get()).finalize_glue() },
  |         }
  | 

--[ Match #51 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  | 
  |     // It should be collected by the GC
  |     force_collect();
  |     FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(3, 1, 2, 1, 1)));
  | }
  | 
  | #[cfg(feature = "nightly")]
  | 

--[ Match #58 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  | 
  |             // Shared borrows can happen multiple times in one scope
  |             let _borrowed2 = gc_wrapper.borrow();
  |             FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  | 
  |             // It should be traced by the GC
  |             force_collect();
  | 

--[ Match #70 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |     }
  | 
  |     FLAGS1.with(|f| assert_eq!(f.get(), GcWatchFlags::new(3, 0, 1, 0, 0)));
  |     FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(3, 0, 1, 0, 0)));
  | 
  |     force_collect();
  | 
  | 

--[ Match #39 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\gc.rs
   Pattern: \.(request|post|get)\(
  |     }
  |     unsafe fn mark(head: &Cell<Option<NonNull<GcBox<dyn Trace>>>>) -> Vec<Unmarked<'_>> {
  |         // Walk the tree, tracing and marking the nodes
  |         let mut mark_head = head.get();
  |         while let Some(node) = mark_head {
  |             if node.as_ref().header.roots() > 0 {
  |                 node.as_ref().trace_inner();
  | 

--[ Match #93 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  | impl Drop for GcWatch {
  |     fn drop(&mut self) {
  |         self.0.with(|f| {
  |             let mut of = f.get();
  |             of.drop += 1;
  |             f.set(of);
  |         });
  | 

--[ Match #98 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\finalize.rs
   Pattern: \.(request|post|get)\(
  | impl Finalize for B {
  |     fn finalize(&self) {
  |         FLAGS.with(|f| {
  |             let mut of = f.get();
  |             of.1 += 1;
  |             f.set(of);
  |         });
  | 

--[ Match #50 of 99 ]--
   Rule Id: BD000610
       Tag: Security.Backdoor.LOLBAS.Linux
  Severity: Moderate, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\gc.rs
   Pattern: \s(apt|apt\-get|aria2c|arp|ash|awk|base64|bash|bpftrace|busybox|cat|chmod|chown|cp|cpan|cpulimit|crontab|csh|curl|cut|dash|dd|diff|dmesg|dmsetup|dnf|docker|dpkg|easy_install|ed|emacs|env|expand|expect|facter|find|finger|flock|fmt|ftp|gawk|gdb|gimp|git|grep|head|iftop|ionice|ip|irb|jjs|journalctl|jrunscript|ksh|ld\.so|ldconfig|logsave|ltrace|lua|mail|mawk|mount|mtr|mv|mysql|nano|nawk|nc|nice|nl|nmap|node|od|openssl|perl|pg|php|pic|pico|pip|puppet|readelf|red|rlogin|rlwrap|rpm|rpmquery|rsync|ruby|run\-mailcap|run\-parts|rvim|scp|screen|script|sed|service|setarch|sftp|shuf|smbclient|socat|sort|sqlite3|ssh|start\-stop\-daemon|stdbuf|strace|systemctl|tail|tar|taskset|tclsh|tcpdump|tee|telnet|tftp|time|timeout|tmux|top|ul|unexpand|uniq|unshare|vi|vim|watch|wget|whois|wish|xargs|xxd|yum|zsh|zypper)\s
  | 
  |     unsafe fn sweep(finalized: Vec<Unmarked<'_>>, bytes_allocated: &mut usize) {
  |         let _guard = DropGuard::new();
  |         for node in finalized.into_iter().rev() {
  |             if node.this.as_ref().header.is_marked() {
  |                 continue;
  |             }
  | 

--[ Match #40 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\gc.rs
   Pattern: \.(request|post|get)\(
  | 
  |     #[inline]
  |     pub fn unmark(&self) {
  |         self.roots.set(self.roots.get() & !MARK_MASK);
  |     }
  | }
  | 
  | 

--[ Match #22 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  | unsafe impl<T: Trace + ?Sized> Trace for GcCell<T> {
  |     #[inline]
  |     unsafe fn trace(&self) {
  |         match self.flags.get().borrowed() {
  |             BorrowState::Writing => (),
  |             _ => (*self.cell.get()).trace(),
  |         }
  | 

--[ Match #64 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |             FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(0, 0, 0, 0, 0)));
  |         }
  | 
  |         FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(0, 0, 0, 0, 0)));
  | 
  |         {
  |             // Borrow it mutably now
  | 

--[ Match #91 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  | unsafe impl Trace for GcWatch {
  |     unsafe fn trace(&self) {
  |         self.0.with(|f| {
  |             let mut of = f.get();
  |             of.trace += 1;
  |             f.set(of);
  |         });
  | 

--[ Match #24 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |             // Force the val_ref's contents to be rooted for the duration of the
  |             // mutable borrow
  |             if !self.flags.get().rooted() {
  |                 (*self.cell.get()).root();
  |             }
  | 
  |             Ok(GcCellRefMut {
  | 

--[ Match #53 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |         }
  | 
  |         // Dropping the borrow should unroot it again
  |         FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(2, 1, 2, 0, 0)));
  | 
  |         // It should be traced by the GC
  |         force_collect();
  | 

--[ Match #75 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |             FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(2, 0, 1, 0, 0)));
  |         }
  | 
  |         FLAGS1.with(|f| assert_eq!(f.get(), GcWatchFlags::new(2, 0, 1, 0, 0)));
  |         FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(2, 0, 1, 0, 0)));
  | 
  |         force_collect();
  | 

--[ Match #18 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |         assert!(!self.flags.get().rooted(), "Can't root a GcCell twice!");
  |         self.flags.set(self.flags.get().set_rooted(true));
  | 
  |         match self.flags.get().borrowed() {
  |             BorrowState::Writing => (),
  |             _ => (*self.cell.get()).root(),
  |         }
  | 

--[ Match #8 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  | 
  | impl<'a, T: ?Sized> Drop for GcCellRef<'a, T> {
  |     fn drop(&mut self) {
  |         debug_assert!(self.flags.get().borrowed() == BorrowState::Reading);
  |         self.flags.set(self.flags.get().sub_reading());
  |     }
  | }
  | 

--[ Match #26 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |         if self.flags.get().borrowed() != BorrowState::Unused {
  |             return Err(BorrowMutError);
  |         }
  |         self.flags.set(self.flags.get().set_writing());
  | 
  |         unsafe {
  |             // Force the val_ref's contents to be rooted for the duration of the
  | 

--[ Match #89 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |     }
  |     unsafe fn unroot(&self) {
  |         self.0.with(|f| {
  |             let mut of = f.get();
  |             of.unroot += 1;
  |             f.set(of);
  |         });
  | 

--[ Match #42 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\gc.rs
   Pattern: \.(request|post|get)\(
  | 
  |     #[inline]
  |     pub fn is_marked(&self) -> bool {
  |         self.roots.get() & MARK_MASK != 0
  |     }
  | 
  |     #[inline]
  | 

--[ Match #77 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  | 
  |             force_collect();
  | 
  |             FLAGS1.with(|f| assert_eq!(f.get(), GcWatchFlags::new(2, 0, 1, 0, 0)));
  |             FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(2, 0, 1, 0, 0)));
  |         }
  | 
  | 

--[ Match #67 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |     {
  |         let cell = GcCell::new(GcWatch(&FLAGS));
  | 
  |         FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(0, 0, 0, 0, 0)));
  | 
  |         {
  |             // Borrow it
  | 

--[ Match #95 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\finalize.rs
   Pattern: \.(request|post|get)\(
  |         let _x = A { b: B };
  |         FLAGS.with(|f| assert_eq!(f.get(), Flags(0, 0)));
  |     }
  |     FLAGS.with(|f| assert_eq!(f.get(), Flags(1, 1)));
  | }
  | 

--[ Match #35 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |     }
  | 
  |     unsafe fn set_root(&self) {
  |         let ptr = self.ptr_root.get().as_ptr();
  |         let data = ptr.cast::<u8>();
  |         let addr = data as isize;
  |         let ptr = set_data_ptr(ptr, data.wrapping_offset((addr | 1) - addr));
  | 

--[ Match #71 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |         FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(3, 0, 1, 0, 0)));
  |     }
  | 
  |     FLAGS1.with(|f| assert_eq!(f.get(), GcWatchFlags::new(3, 0, 1, 0, 0)));
  |     FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(3, 0, 1, 0, 0)));
  | 
  |     force_collect();
  | 

--[ Match #62 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |             FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(0, 0, 0, 0, 0)));
  |         }
  | 
  |         FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(0, 0, 0, 0, 0)));
  | 
  |         // Put it in a gc (should unroot the GcWatch)
  |         let gc_wrapper = Gc::new(cell);
  | 

--[ Match #6 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  | impl<'a, T: Trace + ?Sized, U: ?Sized> Drop for GcCellRefMut<'a, T, U> {
  |     #[inline]
  |     fn drop(&mut self) {
  |         debug_assert!(self.gc_cell.flags.get().borrowed() == BorrowState::Writing);
  |         // Restore the rooted state of the GcCell's contents to the state of the GcCell.
  |         // During the lifetime of the GcCellRefMut, the GcCell's contents are rooted.
  |         if !self.gc_cell.flags.get().rooted() {
  | 

--[ Match #81 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  | 
  |         force_collect();
  | 
  |         FLAGS1.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  |         FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  | 
  |         // Move node2 into the cycleref
  | 

--[ Match #19 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |     #[inline]
  |     unsafe fn root(&self) {
  |         assert!(!self.flags.get().rooted(), "Can't root a GcCell twice!");
  |         self.flags.set(self.flags.get().set_rooted(true));
  | 
  |         match self.flags.get().borrowed() {
  |             BorrowState::Writing => (),
  | 

--[ Match #33 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |         // This assert exists just in case.
  |         assert!(finalizer_safe() || self.rooted());
  | 
  |         unsafe { clear_root_bit(self.ptr_root.get()).as_ptr() }
  |     }
  | 
  |     #[inline]
  | 

--[ Match #52 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  | 
  |         // It should be traced by the GC
  |         force_collect();
  |         FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(3, 1, 2, 0, 0)));
  |     }
  | 
  |     // It should be collected by the GC
  | 

--[ Match #25 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\lib.rs
   Pattern: \.(request|post|get)\(
  |         unsafe {
  |             // Force the val_ref's contents to be rooted for the duration of the
  |             // mutable borrow
  |             if !self.flags.get().rooted() {
  |                 (*self.cell.get()).root();
  |             }
  | 
  | 

--[ Match #78 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |             *node1.cycle.borrow_mut() = Some(node2);
  | 
  |             FLAGS1.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  |             FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  | 
  |             force_collect();
  | 
  | 

--[ Match #80 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |         force_collect();
  | 
  |         FLAGS1.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  |         FLAGS2.with(|f| assert_eq!(f.get(), GcWatchFlags::new(1, 0, 1, 0, 0)));
  | 
  |         // Move node2 into the cycleref
  |         {
  | 

--[ Match #37 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\src\gc.rs
   Pattern: \.(request|post|get)\(
  |         // and unmark the ones which were.
  |         let mut unmarked = Vec::new();
  |         let mut unmark_head = head;
  |         while let Some(node) = unmark_head.get() {
  |             if node.as_ref().header.is_marked() {
  |                 node.as_ref().header.unmark();
  |             } else {
  | 

--[ Match #66 of 99 ]--
   Rule Id: BD000700
       Tag: Security.Backdoor.DataExfiltration
  Severity: Important, Confidence: Low
  Filename: \cargo-pkg-cargo-gc@0.5\gc-0.5.0\tests\gc_semantics.rs
   Pattern: \.(request|post|get)\(
  |         {
  |             // Borrow it
  |             let _borrowed = cell.borrow();
  |             FLAGS.with(|f| assert_eq!(f.get(), GcWatchFlags::new(0, 0, 0, 0, 0)));
  | 
  |             // Shared borrows can happen multiple times in one scope
  |             let _borrowed2 = cell.borrow();
  | 